// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.// sources:
// assets/en/3rdpartylicenses.txt
// assets/en/MaterialIcons-Regular.4674f8ded773cb03e824.eot
// assets/en/MaterialIcons-Regular.5e7382c63da0098d634a.ttf
// assets/en/MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff
// assets/en/MaterialIcons-Regular.cff684e59ffb052d72cb.woff2
// assets/en/Roboto-Black.41ed1105a6ebb8ffe34e.woff2
// assets/en/Roboto-Black.937491dfcbe64ca9a9f1.woff
// assets/en/Roboto-BlackItalic.2e1ee657996854c6f427.woff
// assets/en/Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2
// assets/en/Roboto-Bold.73288d91c325e82a5b92.woff
// assets/en/Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2
// assets/en/Roboto-BoldItalic.5f600d98a73d800ae575.woff2
// assets/en/Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff
// assets/en/Roboto-Light.c27d89ac77468ae18f28.woff2
// assets/en/Roboto-Light.d923dfafc0c5183b59aa.woff
// assets/en/Roboto-LightItalic.506274c7228cf81cae4d.woff2
// assets/en/Roboto-LightItalic.d4b8c137518d9d92bb28.woff
// assets/en/Roboto-Medium.092c6130df8fd2199888.woff
// assets/en/Roboto-Medium.1d3bced88509b0838984.woff2
// assets/en/Roboto-MediumItalic.18ff1628c628080166c1.woff
// assets/en/Roboto-MediumItalic.d620b8f53f75966fe42e.woff2
// assets/en/Roboto-Regular.64cfb66c866ea50cad47.woff2
// assets/en/Roboto-Regular.e02e9d6ff5547f7e9962.woff
// assets/en/Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2
// assets/en/Roboto-RegularItalic.5ea38fff9eebef99c5df.woff
// assets/en/Roboto-Thin.dbd56bd3357dc3617fe5.woff2
// assets/en/Roboto-Thin.e7f7c82374bd0ebef14b.woff
// assets/en/Roboto-ThinItalic.5dd9349c940073834e9a.woff
// assets/en/Roboto-ThinItalic.a8cef84f735ef887abdc.woff2
// assets/en/assets/brand/mlt-logo-en-dark.svg
// assets/en/assets/brand/mlt-logo-en-orig.svg
// assets/en/assets/brand/mlt-logo-en.svg
// assets/en/assets/brand/mlt-logo-ru-dark.svg
// assets/en/assets/brand/mlt-logo-ru-orig.svg
// assets/en/assets/brand/mlt-logo-ru.svg
// assets/en/assets/brand/mlt-logo-zh-dark.svg
// assets/en/assets/brand/mlt-logo-zh-orig.svg
// assets/en/assets/brand/mlt-logo-zh.svg
// assets/en/assets/flags/china_round_48.png
// assets/en/assets/flags/russia_round_48.png
// assets/en/assets/flags/usa_round_48.png
// assets/en/favicon.ico
// assets/en/index.html
// assets/en/main-es2015.1117eea21cfc86471a6c.js
// assets/en/main-es5.1117eea21cfc86471a6c.js
// assets/en/polyfills-es2015.10a07900b65aecac03a2.js
// assets/en/polyfills-es5.587222d5226b8496b799.js
// assets/en/runtime-es2015.09d185272b2306805acd.js
// assets/en/runtime-es5.09d185272b2306805acd.js
// assets/en/styles.08e54aa5a9ab8359a20a.css
// assets/gotty/linux_amd64/gotty
// assets/gotty/linux_arm/gotty
// assets/ru/3rdpartylicenses.txt
// assets/ru/MaterialIcons-Regular.4674f8ded773cb03e824.eot
// assets/ru/MaterialIcons-Regular.5e7382c63da0098d634a.ttf
// assets/ru/MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff
// assets/ru/MaterialIcons-Regular.cff684e59ffb052d72cb.woff2
// assets/ru/Roboto-Black.41ed1105a6ebb8ffe34e.woff2
// assets/ru/Roboto-Black.937491dfcbe64ca9a9f1.woff
// assets/ru/Roboto-BlackItalic.2e1ee657996854c6f427.woff
// assets/ru/Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2
// assets/ru/Roboto-Bold.73288d91c325e82a5b92.woff
// assets/ru/Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2
// assets/ru/Roboto-BoldItalic.5f600d98a73d800ae575.woff2
// assets/ru/Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff
// assets/ru/Roboto-Light.c27d89ac77468ae18f28.woff2
// assets/ru/Roboto-Light.d923dfafc0c5183b59aa.woff
// assets/ru/Roboto-LightItalic.506274c7228cf81cae4d.woff2
// assets/ru/Roboto-LightItalic.d4b8c137518d9d92bb28.woff
// assets/ru/Roboto-Medium.092c6130df8fd2199888.woff
// assets/ru/Roboto-Medium.1d3bced88509b0838984.woff2
// assets/ru/Roboto-MediumItalic.18ff1628c628080166c1.woff
// assets/ru/Roboto-MediumItalic.d620b8f53f75966fe42e.woff2
// assets/ru/Roboto-Regular.64cfb66c866ea50cad47.woff2
// assets/ru/Roboto-Regular.e02e9d6ff5547f7e9962.woff
// assets/ru/Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2
// assets/ru/Roboto-RegularItalic.5ea38fff9eebef99c5df.woff
// assets/ru/Roboto-Thin.dbd56bd3357dc3617fe5.woff2
// assets/ru/Roboto-Thin.e7f7c82374bd0ebef14b.woff
// assets/ru/Roboto-ThinItalic.5dd9349c940073834e9a.woff
// assets/ru/Roboto-ThinItalic.a8cef84f735ef887abdc.woff2
// assets/ru/assets/brand/mlt-logo-en-dark.svg
// assets/ru/assets/brand/mlt-logo-en-orig.svg
// assets/ru/assets/brand/mlt-logo-en.svg
// assets/ru/assets/brand/mlt-logo-ru-dark.svg
// assets/ru/assets/brand/mlt-logo-ru-orig.svg
// assets/ru/assets/brand/mlt-logo-ru.svg
// assets/ru/assets/brand/mlt-logo-zh-dark.svg
// assets/ru/assets/brand/mlt-logo-zh-orig.svg
// assets/ru/assets/brand/mlt-logo-zh.svg
// assets/ru/assets/flags/china_round_48.png
// assets/ru/assets/flags/russia_round_48.png
// assets/ru/assets/flags/usa_round_48.png
// assets/ru/favicon.ico
// assets/ru/index.html
// assets/ru/main-es2015.1117eea21cfc86471a6c.js
// assets/ru/main-es5.1117eea21cfc86471a6c.js
// assets/ru/polyfills-es2015.10a07900b65aecac03a2.js
// assets/ru/polyfills-es5.587222d5226b8496b799.js
// assets/ru/runtime-es2015.09d185272b2306805acd.js
// assets/ru/runtime-es5.09d185272b2306805acd.js
// assets/ru/styles.08e54aa5a9ab8359a20a.css
// assets/zh/3rdpartylicenses.txt
// assets/zh/MaterialIcons-Regular.4674f8ded773cb03e824.eot
// assets/zh/MaterialIcons-Regular.5e7382c63da0098d634a.ttf
// assets/zh/MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff
// assets/zh/MaterialIcons-Regular.cff684e59ffb052d72cb.woff2
// assets/zh/Roboto-Black.41ed1105a6ebb8ffe34e.woff2
// assets/zh/Roboto-Black.937491dfcbe64ca9a9f1.woff
// assets/zh/Roboto-BlackItalic.2e1ee657996854c6f427.woff
// assets/zh/Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2
// assets/zh/Roboto-Bold.73288d91c325e82a5b92.woff
// assets/zh/Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2
// assets/zh/Roboto-BoldItalic.5f600d98a73d800ae575.woff2
// assets/zh/Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff
// assets/zh/Roboto-Light.c27d89ac77468ae18f28.woff2
// assets/zh/Roboto-Light.d923dfafc0c5183b59aa.woff
// assets/zh/Roboto-LightItalic.506274c7228cf81cae4d.woff2
// assets/zh/Roboto-LightItalic.d4b8c137518d9d92bb28.woff
// assets/zh/Roboto-Medium.092c6130df8fd2199888.woff
// assets/zh/Roboto-Medium.1d3bced88509b0838984.woff2
// assets/zh/Roboto-MediumItalic.18ff1628c628080166c1.woff
// assets/zh/Roboto-MediumItalic.d620b8f53f75966fe42e.woff2
// assets/zh/Roboto-Regular.64cfb66c866ea50cad47.woff2
// assets/zh/Roboto-Regular.e02e9d6ff5547f7e9962.woff
// assets/zh/Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2
// assets/zh/Roboto-RegularItalic.5ea38fff9eebef99c5df.woff
// assets/zh/Roboto-Thin.dbd56bd3357dc3617fe5.woff2
// assets/zh/Roboto-Thin.e7f7c82374bd0ebef14b.woff
// assets/zh/Roboto-ThinItalic.5dd9349c940073834e9a.woff
// assets/zh/Roboto-ThinItalic.a8cef84f735ef887abdc.woff2
// assets/zh/assets/brand/mlt-logo-en-dark.svg
// assets/zh/assets/brand/mlt-logo-en-orig.svg
// assets/zh/assets/brand/mlt-logo-en.svg
// assets/zh/assets/brand/mlt-logo-ru-dark.svg
// assets/zh/assets/brand/mlt-logo-ru-orig.svg
// assets/zh/assets/brand/mlt-logo-ru.svg
// assets/zh/assets/brand/mlt-logo-zh-dark.svg
// assets/zh/assets/brand/mlt-logo-zh-orig.svg
// assets/zh/assets/brand/mlt-logo-zh.svg
// assets/zh/assets/flags/china_round_48.png
// assets/zh/assets/flags/russia_round_48.png
// assets/zh/assets/flags/usa_round_48.png
// assets/zh/favicon.ico
// assets/zh/index.html
// assets/zh/main-es2015.1117eea21cfc86471a6c.js
// assets/zh/main-es5.1117eea21cfc86471a6c.js
// assets/zh/polyfills-es2015.10a07900b65aecac03a2.js
// assets/zh/polyfills-es5.587222d5226b8496b799.js
// assets/zh/runtime-es2015.09d185272b2306805acd.js
// assets/zh/runtime-es5.09d185272b2306805acd.js
// assets/zh/styles.08e54aa5a9ab8359a20a.css
package bindata

import (
	"bytes"
	"net/http"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

// assetsEn3rdpartylicensesTxt reads file data from disk. It returns an error on failure.
func assetsEn3rdpartylicensesTxt() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\3rdpartylicenses.txt"
	name := "assets/en/3rdpartylicenses.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnMaterialiconsRegular4674f8ded773cb03e824Eot reads file data from disk. It returns an error on failure.
func assetsEnMaterialiconsRegular4674f8ded773cb03e824Eot() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\MaterialIcons-Regular.4674f8ded773cb03e824.eot"
	name := "assets/en/MaterialIcons-Regular.4674f8ded773cb03e824.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnMaterialiconsRegular5e7382c63da0098d634aTtf reads file data from disk. It returns an error on failure.
func assetsEnMaterialiconsRegular5e7382c63da0098d634aTtf() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\MaterialIcons-Regular.5e7382c63da0098d634a.ttf"
	name := "assets/en/MaterialIcons-Regular.5e7382c63da0098d634a.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnMaterialiconsRegular83bebaf37c09c7e1c3eeWoff reads file data from disk. It returns an error on failure.
func assetsEnMaterialiconsRegular83bebaf37c09c7e1c3eeWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff"
	name := "assets/en/MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnMaterialiconsRegularCff684e59ffb052d72cbWoff2 reads file data from disk. It returns an error on failure.
func assetsEnMaterialiconsRegularCff684e59ffb052d72cbWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\MaterialIcons-Regular.cff684e59ffb052d72cb.woff2"
	name := "assets/en/MaterialIcons-Regular.cff684e59ffb052d72cb.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBlack41ed1105a6ebb8ffe34eWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoBlack41ed1105a6ebb8ffe34eWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Black.41ed1105a6ebb8ffe34e.woff2"
	name := "assets/en/Roboto-Black.41ed1105a6ebb8ffe34e.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBlack937491dfcbe64ca9a9f1Woff reads file data from disk. It returns an error on failure.
func assetsEnRobotoBlack937491dfcbe64ca9a9f1Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Black.937491dfcbe64ca9a9f1.woff"
	name := "assets/en/Roboto-Black.937491dfcbe64ca9a9f1.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBlackitalic2e1ee657996854c6f427Woff reads file data from disk. It returns an error on failure.
func assetsEnRobotoBlackitalic2e1ee657996854c6f427Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-BlackItalic.2e1ee657996854c6f427.woff"
	name := "assets/en/Roboto-BlackItalic.2e1ee657996854c6f427.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBlackitalic50ca4c51ebc27e7e7d2fWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoBlackitalic50ca4c51ebc27e7e7d2fWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2"
	name := "assets/en/Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBold73288d91c325e82a5b92Woff reads file data from disk. It returns an error on failure.
func assetsEnRobotoBold73288d91c325e82a5b92Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Bold.73288d91c325e82a5b92.woff"
	name := "assets/en/Roboto-Bold.73288d91c325e82a5b92.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBold92fbd4e93cf0a5dbebaaWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoBold92fbd4e93cf0a5dbebaaWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2"
	name := "assets/en/Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBolditalic5f600d98a73d800ae575Woff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoBolditalic5f600d98a73d800ae575Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-BoldItalic.5f600d98a73d800ae575.woff2"
	name := "assets/en/Roboto-BoldItalic.5f600d98a73d800ae575.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBolditalic6d89acbd21d7e3fbecb2Woff reads file data from disk. It returns an error on failure.
func assetsEnRobotoBolditalic6d89acbd21d7e3fbecb2Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff"
	name := "assets/en/Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoLightC27d89ac77468ae18f28Woff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoLightC27d89ac77468ae18f28Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Light.c27d89ac77468ae18f28.woff2"
	name := "assets/en/Roboto-Light.c27d89ac77468ae18f28.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoLightD923dfafc0c5183b59aaWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoLightD923dfafc0c5183b59aaWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Light.d923dfafc0c5183b59aa.woff"
	name := "assets/en/Roboto-Light.d923dfafc0c5183b59aa.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoLightitalic506274c7228cf81cae4dWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoLightitalic506274c7228cf81cae4dWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-LightItalic.506274c7228cf81cae4d.woff2"
	name := "assets/en/Roboto-LightItalic.506274c7228cf81cae4d.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoLightitalicD4b8c137518d9d92bb28Woff reads file data from disk. It returns an error on failure.
func assetsEnRobotoLightitalicD4b8c137518d9d92bb28Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-LightItalic.d4b8c137518d9d92bb28.woff"
	name := "assets/en/Roboto-LightItalic.d4b8c137518d9d92bb28.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoMedium092c6130df8fd2199888Woff reads file data from disk. It returns an error on failure.
func assetsEnRobotoMedium092c6130df8fd2199888Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Medium.092c6130df8fd2199888.woff"
	name := "assets/en/Roboto-Medium.092c6130df8fd2199888.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoMedium1d3bced88509b0838984Woff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoMedium1d3bced88509b0838984Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Medium.1d3bced88509b0838984.woff2"
	name := "assets/en/Roboto-Medium.1d3bced88509b0838984.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoMediumitalic18ff1628c628080166c1Woff reads file data from disk. It returns an error on failure.
func assetsEnRobotoMediumitalic18ff1628c628080166c1Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-MediumItalic.18ff1628c628080166c1.woff"
	name := "assets/en/Roboto-MediumItalic.18ff1628c628080166c1.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoMediumitalicD620b8f53f75966fe42eWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoMediumitalicD620b8f53f75966fe42eWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-MediumItalic.d620b8f53f75966fe42e.woff2"
	name := "assets/en/Roboto-MediumItalic.d620b8f53f75966fe42e.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoRegular64cfb66c866ea50cad47Woff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoRegular64cfb66c866ea50cad47Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Regular.64cfb66c866ea50cad47.woff2"
	name := "assets/en/Roboto-Regular.64cfb66c866ea50cad47.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoRegularE02e9d6ff5547f7e9962Woff reads file data from disk. It returns an error on failure.
func assetsEnRobotoRegularE02e9d6ff5547f7e9962Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Regular.e02e9d6ff5547f7e9962.woff"
	name := "assets/en/Roboto-Regular.e02e9d6ff5547f7e9962.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoRegularitalic4dd2af1e8df532f41db8Woff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoRegularitalic4dd2af1e8df532f41db8Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2"
	name := "assets/en/Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoRegularitalic5ea38fff9eebef99c5dfWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoRegularitalic5ea38fff9eebef99c5dfWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-RegularItalic.5ea38fff9eebef99c5df.woff"
	name := "assets/en/Roboto-RegularItalic.5ea38fff9eebef99c5df.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoThinDbd56bd3357dc3617fe5Woff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoThinDbd56bd3357dc3617fe5Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Thin.dbd56bd3357dc3617fe5.woff2"
	name := "assets/en/Roboto-Thin.dbd56bd3357dc3617fe5.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoThinE7f7c82374bd0ebef14bWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoThinE7f7c82374bd0ebef14bWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Thin.e7f7c82374bd0ebef14b.woff"
	name := "assets/en/Roboto-Thin.e7f7c82374bd0ebef14b.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoThinitalic5dd9349c940073834e9aWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoThinitalic5dd9349c940073834e9aWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-ThinItalic.5dd9349c940073834e9a.woff"
	name := "assets/en/Roboto-ThinItalic.5dd9349c940073834e9a.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoThinitalicA8cef84f735ef887abdcWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoThinitalicA8cef84f735ef887abdcWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-ThinItalic.a8cef84f735ef887abdc.woff2"
	name := "assets/en/Roboto-ThinItalic.a8cef84f735ef887abdc.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoEnDarkSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoEnDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-en-dark.svg"
	name := "assets/en/assets/brand/mlt-logo-en-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoEnOrigSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoEnOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-en-orig.svg"
	name := "assets/en/assets/brand/mlt-logo-en-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoEnSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoEnSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-en.svg"
	name := "assets/en/assets/brand/mlt-logo-en.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoRuDarkSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoRuDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-ru-dark.svg"
	name := "assets/en/assets/brand/mlt-logo-ru-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoRuOrigSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoRuOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-ru-orig.svg"
	name := "assets/en/assets/brand/mlt-logo-ru-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoRuSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoRuSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-ru.svg"
	name := "assets/en/assets/brand/mlt-logo-ru.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoZhDarkSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoZhDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-zh-dark.svg"
	name := "assets/en/assets/brand/mlt-logo-zh-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoZhOrigSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoZhOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-zh-orig.svg"
	name := "assets/en/assets/brand/mlt-logo-zh-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoZhSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoZhSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-zh.svg"
	name := "assets/en/assets/brand/mlt-logo-zh.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsFlagsChina_round_48Png reads file data from disk. It returns an error on failure.
func assetsEnAssetsFlagsChina_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\flags\\china_round_48.png"
	name := "assets/en/assets/flags/china_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsFlagsRussia_round_48Png reads file data from disk. It returns an error on failure.
func assetsEnAssetsFlagsRussia_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\flags\\russia_round_48.png"
	name := "assets/en/assets/flags/russia_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsFlagsUsa_round_48Png reads file data from disk. It returns an error on failure.
func assetsEnAssetsFlagsUsa_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\flags\\usa_round_48.png"
	name := "assets/en/assets/flags/usa_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnFaviconIco reads file data from disk. It returns an error on failure.
func assetsEnFaviconIco() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\favicon.ico"
	name := "assets/en/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnIndexHtml reads file data from disk. It returns an error on failure.
func assetsEnIndexHtml() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\index.html"
	name := "assets/en/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnMainEs20151117eea21cfc86471a6cJs reads file data from disk. It returns an error on failure.
func assetsEnMainEs20151117eea21cfc86471a6cJs() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\main-es2015.1117eea21cfc86471a6c.js"
	name := "assets/en/main-es2015.1117eea21cfc86471a6c.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnMainEs51117eea21cfc86471a6cJs reads file data from disk. It returns an error on failure.
func assetsEnMainEs51117eea21cfc86471a6cJs() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\main-es5.1117eea21cfc86471a6c.js"
	name := "assets/en/main-es5.1117eea21cfc86471a6c.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnPolyfillsEs201510a07900b65aecac03a2Js reads file data from disk. It returns an error on failure.
func assetsEnPolyfillsEs201510a07900b65aecac03a2Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\polyfills-es2015.10a07900b65aecac03a2.js"
	name := "assets/en/polyfills-es2015.10a07900b65aecac03a2.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnPolyfillsEs5587222d5226b8496b799Js reads file data from disk. It returns an error on failure.
func assetsEnPolyfillsEs5587222d5226b8496b799Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\polyfills-es5.587222d5226b8496b799.js"
	name := "assets/en/polyfills-es5.587222d5226b8496b799.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRuntimeEs201509d185272b2306805acdJs reads file data from disk. It returns an error on failure.
func assetsEnRuntimeEs201509d185272b2306805acdJs() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\runtime-es2015.09d185272b2306805acd.js"
	name := "assets/en/runtime-es2015.09d185272b2306805acd.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRuntimeEs509d185272b2306805acdJs reads file data from disk. It returns an error on failure.
func assetsEnRuntimeEs509d185272b2306805acdJs() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\runtime-es5.09d185272b2306805acd.js"
	name := "assets/en/runtime-es5.09d185272b2306805acd.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnStyles08e54aa5a9ab8359a20aCss reads file data from disk. It returns an error on failure.
func assetsEnStyles08e54aa5a9ab8359a20aCss() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\styles.08e54aa5a9ab8359a20a.css"
	name := "assets/en/styles.08e54aa5a9ab8359a20a.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsGottyLinux_amd64Gotty reads file data from disk. It returns an error on failure.
func assetsGottyLinux_amd64Gotty() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\gotty\\linux_amd64\\gotty"
	name := "assets/gotty/linux_amd64/gotty"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsGottyLinux_armGotty reads file data from disk. It returns an error on failure.
func assetsGottyLinux_armGotty() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\gotty\\linux_arm\\gotty"
	name := "assets/gotty/linux_arm/gotty"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRu3rdpartylicensesTxt reads file data from disk. It returns an error on failure.
func assetsRu3rdpartylicensesTxt() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\3rdpartylicenses.txt"
	name := "assets/ru/3rdpartylicenses.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMaterialiconsRegular4674f8ded773cb03e824Eot reads file data from disk. It returns an error on failure.
func assetsRuMaterialiconsRegular4674f8ded773cb03e824Eot() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\MaterialIcons-Regular.4674f8ded773cb03e824.eot"
	name := "assets/ru/MaterialIcons-Regular.4674f8ded773cb03e824.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMaterialiconsRegular5e7382c63da0098d634aTtf reads file data from disk. It returns an error on failure.
func assetsRuMaterialiconsRegular5e7382c63da0098d634aTtf() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\MaterialIcons-Regular.5e7382c63da0098d634a.ttf"
	name := "assets/ru/MaterialIcons-Regular.5e7382c63da0098d634a.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMaterialiconsRegular83bebaf37c09c7e1c3eeWoff reads file data from disk. It returns an error on failure.
func assetsRuMaterialiconsRegular83bebaf37c09c7e1c3eeWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff"
	name := "assets/ru/MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMaterialiconsRegularCff684e59ffb052d72cbWoff2 reads file data from disk. It returns an error on failure.
func assetsRuMaterialiconsRegularCff684e59ffb052d72cbWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\MaterialIcons-Regular.cff684e59ffb052d72cb.woff2"
	name := "assets/ru/MaterialIcons-Regular.cff684e59ffb052d72cb.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBlack41ed1105a6ebb8ffe34eWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoBlack41ed1105a6ebb8ffe34eWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Black.41ed1105a6ebb8ffe34e.woff2"
	name := "assets/ru/Roboto-Black.41ed1105a6ebb8ffe34e.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBlack937491dfcbe64ca9a9f1Woff reads file data from disk. It returns an error on failure.
func assetsRuRobotoBlack937491dfcbe64ca9a9f1Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Black.937491dfcbe64ca9a9f1.woff"
	name := "assets/ru/Roboto-Black.937491dfcbe64ca9a9f1.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBlackitalic2e1ee657996854c6f427Woff reads file data from disk. It returns an error on failure.
func assetsRuRobotoBlackitalic2e1ee657996854c6f427Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-BlackItalic.2e1ee657996854c6f427.woff"
	name := "assets/ru/Roboto-BlackItalic.2e1ee657996854c6f427.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBlackitalic50ca4c51ebc27e7e7d2fWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoBlackitalic50ca4c51ebc27e7e7d2fWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2"
	name := "assets/ru/Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBold73288d91c325e82a5b92Woff reads file data from disk. It returns an error on failure.
func assetsRuRobotoBold73288d91c325e82a5b92Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Bold.73288d91c325e82a5b92.woff"
	name := "assets/ru/Roboto-Bold.73288d91c325e82a5b92.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBold92fbd4e93cf0a5dbebaaWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoBold92fbd4e93cf0a5dbebaaWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2"
	name := "assets/ru/Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBolditalic5f600d98a73d800ae575Woff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoBolditalic5f600d98a73d800ae575Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-BoldItalic.5f600d98a73d800ae575.woff2"
	name := "assets/ru/Roboto-BoldItalic.5f600d98a73d800ae575.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBolditalic6d89acbd21d7e3fbecb2Woff reads file data from disk. It returns an error on failure.
func assetsRuRobotoBolditalic6d89acbd21d7e3fbecb2Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff"
	name := "assets/ru/Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoLightC27d89ac77468ae18f28Woff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoLightC27d89ac77468ae18f28Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Light.c27d89ac77468ae18f28.woff2"
	name := "assets/ru/Roboto-Light.c27d89ac77468ae18f28.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoLightD923dfafc0c5183b59aaWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoLightD923dfafc0c5183b59aaWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Light.d923dfafc0c5183b59aa.woff"
	name := "assets/ru/Roboto-Light.d923dfafc0c5183b59aa.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoLightitalic506274c7228cf81cae4dWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoLightitalic506274c7228cf81cae4dWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-LightItalic.506274c7228cf81cae4d.woff2"
	name := "assets/ru/Roboto-LightItalic.506274c7228cf81cae4d.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoLightitalicD4b8c137518d9d92bb28Woff reads file data from disk. It returns an error on failure.
func assetsRuRobotoLightitalicD4b8c137518d9d92bb28Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-LightItalic.d4b8c137518d9d92bb28.woff"
	name := "assets/ru/Roboto-LightItalic.d4b8c137518d9d92bb28.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoMedium092c6130df8fd2199888Woff reads file data from disk. It returns an error on failure.
func assetsRuRobotoMedium092c6130df8fd2199888Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Medium.092c6130df8fd2199888.woff"
	name := "assets/ru/Roboto-Medium.092c6130df8fd2199888.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoMedium1d3bced88509b0838984Woff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoMedium1d3bced88509b0838984Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Medium.1d3bced88509b0838984.woff2"
	name := "assets/ru/Roboto-Medium.1d3bced88509b0838984.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoMediumitalic18ff1628c628080166c1Woff reads file data from disk. It returns an error on failure.
func assetsRuRobotoMediumitalic18ff1628c628080166c1Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-MediumItalic.18ff1628c628080166c1.woff"
	name := "assets/ru/Roboto-MediumItalic.18ff1628c628080166c1.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoMediumitalicD620b8f53f75966fe42eWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoMediumitalicD620b8f53f75966fe42eWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-MediumItalic.d620b8f53f75966fe42e.woff2"
	name := "assets/ru/Roboto-MediumItalic.d620b8f53f75966fe42e.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoRegular64cfb66c866ea50cad47Woff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoRegular64cfb66c866ea50cad47Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Regular.64cfb66c866ea50cad47.woff2"
	name := "assets/ru/Roboto-Regular.64cfb66c866ea50cad47.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoRegularE02e9d6ff5547f7e9962Woff reads file data from disk. It returns an error on failure.
func assetsRuRobotoRegularE02e9d6ff5547f7e9962Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Regular.e02e9d6ff5547f7e9962.woff"
	name := "assets/ru/Roboto-Regular.e02e9d6ff5547f7e9962.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoRegularitalic4dd2af1e8df532f41db8Woff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoRegularitalic4dd2af1e8df532f41db8Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2"
	name := "assets/ru/Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoRegularitalic5ea38fff9eebef99c5dfWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoRegularitalic5ea38fff9eebef99c5dfWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-RegularItalic.5ea38fff9eebef99c5df.woff"
	name := "assets/ru/Roboto-RegularItalic.5ea38fff9eebef99c5df.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoThinDbd56bd3357dc3617fe5Woff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoThinDbd56bd3357dc3617fe5Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Thin.dbd56bd3357dc3617fe5.woff2"
	name := "assets/ru/Roboto-Thin.dbd56bd3357dc3617fe5.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoThinE7f7c82374bd0ebef14bWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoThinE7f7c82374bd0ebef14bWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Thin.e7f7c82374bd0ebef14b.woff"
	name := "assets/ru/Roboto-Thin.e7f7c82374bd0ebef14b.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoThinitalic5dd9349c940073834e9aWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoThinitalic5dd9349c940073834e9aWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-ThinItalic.5dd9349c940073834e9a.woff"
	name := "assets/ru/Roboto-ThinItalic.5dd9349c940073834e9a.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoThinitalicA8cef84f735ef887abdcWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoThinitalicA8cef84f735ef887abdcWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-ThinItalic.a8cef84f735ef887abdc.woff2"
	name := "assets/ru/Roboto-ThinItalic.a8cef84f735ef887abdc.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoEnDarkSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoEnDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-en-dark.svg"
	name := "assets/ru/assets/brand/mlt-logo-en-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoEnOrigSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoEnOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-en-orig.svg"
	name := "assets/ru/assets/brand/mlt-logo-en-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoEnSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoEnSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-en.svg"
	name := "assets/ru/assets/brand/mlt-logo-en.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoRuDarkSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoRuDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-ru-dark.svg"
	name := "assets/ru/assets/brand/mlt-logo-ru-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoRuOrigSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoRuOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-ru-orig.svg"
	name := "assets/ru/assets/brand/mlt-logo-ru-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoRuSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoRuSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-ru.svg"
	name := "assets/ru/assets/brand/mlt-logo-ru.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoZhDarkSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoZhDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-zh-dark.svg"
	name := "assets/ru/assets/brand/mlt-logo-zh-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoZhOrigSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoZhOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-zh-orig.svg"
	name := "assets/ru/assets/brand/mlt-logo-zh-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoZhSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoZhSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-zh.svg"
	name := "assets/ru/assets/brand/mlt-logo-zh.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsFlagsChina_round_48Png reads file data from disk. It returns an error on failure.
func assetsRuAssetsFlagsChina_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\flags\\china_round_48.png"
	name := "assets/ru/assets/flags/china_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsFlagsRussia_round_48Png reads file data from disk. It returns an error on failure.
func assetsRuAssetsFlagsRussia_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\flags\\russia_round_48.png"
	name := "assets/ru/assets/flags/russia_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsFlagsUsa_round_48Png reads file data from disk. It returns an error on failure.
func assetsRuAssetsFlagsUsa_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\flags\\usa_round_48.png"
	name := "assets/ru/assets/flags/usa_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuFaviconIco reads file data from disk. It returns an error on failure.
func assetsRuFaviconIco() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\favicon.ico"
	name := "assets/ru/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuIndexHtml reads file data from disk. It returns an error on failure.
func assetsRuIndexHtml() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\index.html"
	name := "assets/ru/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMainEs20151117eea21cfc86471a6cJs reads file data from disk. It returns an error on failure.
func assetsRuMainEs20151117eea21cfc86471a6cJs() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\main-es2015.1117eea21cfc86471a6c.js"
	name := "assets/ru/main-es2015.1117eea21cfc86471a6c.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMainEs51117eea21cfc86471a6cJs reads file data from disk. It returns an error on failure.
func assetsRuMainEs51117eea21cfc86471a6cJs() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\main-es5.1117eea21cfc86471a6c.js"
	name := "assets/ru/main-es5.1117eea21cfc86471a6c.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuPolyfillsEs201510a07900b65aecac03a2Js reads file data from disk. It returns an error on failure.
func assetsRuPolyfillsEs201510a07900b65aecac03a2Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\polyfills-es2015.10a07900b65aecac03a2.js"
	name := "assets/ru/polyfills-es2015.10a07900b65aecac03a2.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuPolyfillsEs5587222d5226b8496b799Js reads file data from disk. It returns an error on failure.
func assetsRuPolyfillsEs5587222d5226b8496b799Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\polyfills-es5.587222d5226b8496b799.js"
	name := "assets/ru/polyfills-es5.587222d5226b8496b799.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRuntimeEs201509d185272b2306805acdJs reads file data from disk. It returns an error on failure.
func assetsRuRuntimeEs201509d185272b2306805acdJs() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\runtime-es2015.09d185272b2306805acd.js"
	name := "assets/ru/runtime-es2015.09d185272b2306805acd.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRuntimeEs509d185272b2306805acdJs reads file data from disk. It returns an error on failure.
func assetsRuRuntimeEs509d185272b2306805acdJs() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\runtime-es5.09d185272b2306805acd.js"
	name := "assets/ru/runtime-es5.09d185272b2306805acd.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuStyles08e54aa5a9ab8359a20aCss reads file data from disk. It returns an error on failure.
func assetsRuStyles08e54aa5a9ab8359a20aCss() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\styles.08e54aa5a9ab8359a20a.css"
	name := "assets/ru/styles.08e54aa5a9ab8359a20a.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZh3rdpartylicensesTxt reads file data from disk. It returns an error on failure.
func assetsZh3rdpartylicensesTxt() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\3rdpartylicenses.txt"
	name := "assets/zh/3rdpartylicenses.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMaterialiconsRegular4674f8ded773cb03e824Eot reads file data from disk. It returns an error on failure.
func assetsZhMaterialiconsRegular4674f8ded773cb03e824Eot() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\MaterialIcons-Regular.4674f8ded773cb03e824.eot"
	name := "assets/zh/MaterialIcons-Regular.4674f8ded773cb03e824.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMaterialiconsRegular5e7382c63da0098d634aTtf reads file data from disk. It returns an error on failure.
func assetsZhMaterialiconsRegular5e7382c63da0098d634aTtf() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\MaterialIcons-Regular.5e7382c63da0098d634a.ttf"
	name := "assets/zh/MaterialIcons-Regular.5e7382c63da0098d634a.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMaterialiconsRegular83bebaf37c09c7e1c3eeWoff reads file data from disk. It returns an error on failure.
func assetsZhMaterialiconsRegular83bebaf37c09c7e1c3eeWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff"
	name := "assets/zh/MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMaterialiconsRegularCff684e59ffb052d72cbWoff2 reads file data from disk. It returns an error on failure.
func assetsZhMaterialiconsRegularCff684e59ffb052d72cbWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\MaterialIcons-Regular.cff684e59ffb052d72cb.woff2"
	name := "assets/zh/MaterialIcons-Regular.cff684e59ffb052d72cb.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBlack41ed1105a6ebb8ffe34eWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoBlack41ed1105a6ebb8ffe34eWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Black.41ed1105a6ebb8ffe34e.woff2"
	name := "assets/zh/Roboto-Black.41ed1105a6ebb8ffe34e.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBlack937491dfcbe64ca9a9f1Woff reads file data from disk. It returns an error on failure.
func assetsZhRobotoBlack937491dfcbe64ca9a9f1Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Black.937491dfcbe64ca9a9f1.woff"
	name := "assets/zh/Roboto-Black.937491dfcbe64ca9a9f1.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBlackitalic2e1ee657996854c6f427Woff reads file data from disk. It returns an error on failure.
func assetsZhRobotoBlackitalic2e1ee657996854c6f427Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-BlackItalic.2e1ee657996854c6f427.woff"
	name := "assets/zh/Roboto-BlackItalic.2e1ee657996854c6f427.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBlackitalic50ca4c51ebc27e7e7d2fWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoBlackitalic50ca4c51ebc27e7e7d2fWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2"
	name := "assets/zh/Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBold73288d91c325e82a5b92Woff reads file data from disk. It returns an error on failure.
func assetsZhRobotoBold73288d91c325e82a5b92Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Bold.73288d91c325e82a5b92.woff"
	name := "assets/zh/Roboto-Bold.73288d91c325e82a5b92.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBold92fbd4e93cf0a5dbebaaWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoBold92fbd4e93cf0a5dbebaaWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2"
	name := "assets/zh/Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBolditalic5f600d98a73d800ae575Woff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoBolditalic5f600d98a73d800ae575Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-BoldItalic.5f600d98a73d800ae575.woff2"
	name := "assets/zh/Roboto-BoldItalic.5f600d98a73d800ae575.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBolditalic6d89acbd21d7e3fbecb2Woff reads file data from disk. It returns an error on failure.
func assetsZhRobotoBolditalic6d89acbd21d7e3fbecb2Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff"
	name := "assets/zh/Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoLightC27d89ac77468ae18f28Woff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoLightC27d89ac77468ae18f28Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Light.c27d89ac77468ae18f28.woff2"
	name := "assets/zh/Roboto-Light.c27d89ac77468ae18f28.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoLightD923dfafc0c5183b59aaWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoLightD923dfafc0c5183b59aaWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Light.d923dfafc0c5183b59aa.woff"
	name := "assets/zh/Roboto-Light.d923dfafc0c5183b59aa.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoLightitalic506274c7228cf81cae4dWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoLightitalic506274c7228cf81cae4dWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-LightItalic.506274c7228cf81cae4d.woff2"
	name := "assets/zh/Roboto-LightItalic.506274c7228cf81cae4d.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoLightitalicD4b8c137518d9d92bb28Woff reads file data from disk. It returns an error on failure.
func assetsZhRobotoLightitalicD4b8c137518d9d92bb28Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-LightItalic.d4b8c137518d9d92bb28.woff"
	name := "assets/zh/Roboto-LightItalic.d4b8c137518d9d92bb28.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoMedium092c6130df8fd2199888Woff reads file data from disk. It returns an error on failure.
func assetsZhRobotoMedium092c6130df8fd2199888Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Medium.092c6130df8fd2199888.woff"
	name := "assets/zh/Roboto-Medium.092c6130df8fd2199888.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoMedium1d3bced88509b0838984Woff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoMedium1d3bced88509b0838984Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Medium.1d3bced88509b0838984.woff2"
	name := "assets/zh/Roboto-Medium.1d3bced88509b0838984.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoMediumitalic18ff1628c628080166c1Woff reads file data from disk. It returns an error on failure.
func assetsZhRobotoMediumitalic18ff1628c628080166c1Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-MediumItalic.18ff1628c628080166c1.woff"
	name := "assets/zh/Roboto-MediumItalic.18ff1628c628080166c1.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoMediumitalicD620b8f53f75966fe42eWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoMediumitalicD620b8f53f75966fe42eWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-MediumItalic.d620b8f53f75966fe42e.woff2"
	name := "assets/zh/Roboto-MediumItalic.d620b8f53f75966fe42e.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoRegular64cfb66c866ea50cad47Woff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoRegular64cfb66c866ea50cad47Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Regular.64cfb66c866ea50cad47.woff2"
	name := "assets/zh/Roboto-Regular.64cfb66c866ea50cad47.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoRegularE02e9d6ff5547f7e9962Woff reads file data from disk. It returns an error on failure.
func assetsZhRobotoRegularE02e9d6ff5547f7e9962Woff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Regular.e02e9d6ff5547f7e9962.woff"
	name := "assets/zh/Roboto-Regular.e02e9d6ff5547f7e9962.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoRegularitalic4dd2af1e8df532f41db8Woff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoRegularitalic4dd2af1e8df532f41db8Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2"
	name := "assets/zh/Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoRegularitalic5ea38fff9eebef99c5dfWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoRegularitalic5ea38fff9eebef99c5dfWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-RegularItalic.5ea38fff9eebef99c5df.woff"
	name := "assets/zh/Roboto-RegularItalic.5ea38fff9eebef99c5df.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoThinDbd56bd3357dc3617fe5Woff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoThinDbd56bd3357dc3617fe5Woff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Thin.dbd56bd3357dc3617fe5.woff2"
	name := "assets/zh/Roboto-Thin.dbd56bd3357dc3617fe5.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoThinE7f7c82374bd0ebef14bWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoThinE7f7c82374bd0ebef14bWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Thin.e7f7c82374bd0ebef14b.woff"
	name := "assets/zh/Roboto-Thin.e7f7c82374bd0ebef14b.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoThinitalic5dd9349c940073834e9aWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoThinitalic5dd9349c940073834e9aWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-ThinItalic.5dd9349c940073834e9a.woff"
	name := "assets/zh/Roboto-ThinItalic.5dd9349c940073834e9a.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoThinitalicA8cef84f735ef887abdcWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoThinitalicA8cef84f735ef887abdcWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-ThinItalic.a8cef84f735ef887abdc.woff2"
	name := "assets/zh/Roboto-ThinItalic.a8cef84f735ef887abdc.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoEnDarkSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoEnDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-en-dark.svg"
	name := "assets/zh/assets/brand/mlt-logo-en-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoEnOrigSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoEnOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-en-orig.svg"
	name := "assets/zh/assets/brand/mlt-logo-en-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoEnSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoEnSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-en.svg"
	name := "assets/zh/assets/brand/mlt-logo-en.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoRuDarkSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoRuDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-ru-dark.svg"
	name := "assets/zh/assets/brand/mlt-logo-ru-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoRuOrigSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoRuOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-ru-orig.svg"
	name := "assets/zh/assets/brand/mlt-logo-ru-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoRuSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoRuSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-ru.svg"
	name := "assets/zh/assets/brand/mlt-logo-ru.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoZhDarkSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoZhDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-zh-dark.svg"
	name := "assets/zh/assets/brand/mlt-logo-zh-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoZhOrigSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoZhOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-zh-orig.svg"
	name := "assets/zh/assets/brand/mlt-logo-zh-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoZhSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoZhSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-zh.svg"
	name := "assets/zh/assets/brand/mlt-logo-zh.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsFlagsChina_round_48Png reads file data from disk. It returns an error on failure.
func assetsZhAssetsFlagsChina_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\flags\\china_round_48.png"
	name := "assets/zh/assets/flags/china_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsFlagsRussia_round_48Png reads file data from disk. It returns an error on failure.
func assetsZhAssetsFlagsRussia_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\flags\\russia_round_48.png"
	name := "assets/zh/assets/flags/russia_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsFlagsUsa_round_48Png reads file data from disk. It returns an error on failure.
func assetsZhAssetsFlagsUsa_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\flags\\usa_round_48.png"
	name := "assets/zh/assets/flags/usa_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhFaviconIco reads file data from disk. It returns an error on failure.
func assetsZhFaviconIco() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\favicon.ico"
	name := "assets/zh/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhIndexHtml reads file data from disk. It returns an error on failure.
func assetsZhIndexHtml() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\index.html"
	name := "assets/zh/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMainEs20151117eea21cfc86471a6cJs reads file data from disk. It returns an error on failure.
func assetsZhMainEs20151117eea21cfc86471a6cJs() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\main-es2015.1117eea21cfc86471a6c.js"
	name := "assets/zh/main-es2015.1117eea21cfc86471a6c.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMainEs51117eea21cfc86471a6cJs reads file data from disk. It returns an error on failure.
func assetsZhMainEs51117eea21cfc86471a6cJs() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\main-es5.1117eea21cfc86471a6c.js"
	name := "assets/zh/main-es5.1117eea21cfc86471a6c.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhPolyfillsEs201510a07900b65aecac03a2Js reads file data from disk. It returns an error on failure.
func assetsZhPolyfillsEs201510a07900b65aecac03a2Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\polyfills-es2015.10a07900b65aecac03a2.js"
	name := "assets/zh/polyfills-es2015.10a07900b65aecac03a2.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhPolyfillsEs5587222d5226b8496b799Js reads file data from disk. It returns an error on failure.
func assetsZhPolyfillsEs5587222d5226b8496b799Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\polyfills-es5.587222d5226b8496b799.js"
	name := "assets/zh/polyfills-es5.587222d5226b8496b799.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRuntimeEs201509d185272b2306805acdJs reads file data from disk. It returns an error on failure.
func assetsZhRuntimeEs201509d185272b2306805acdJs() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\runtime-es2015.09d185272b2306805acd.js"
	name := "assets/zh/runtime-es2015.09d185272b2306805acd.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRuntimeEs509d185272b2306805acdJs reads file data from disk. It returns an error on failure.
func assetsZhRuntimeEs509d185272b2306805acdJs() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\runtime-es5.09d185272b2306805acd.js"
	name := "assets/zh/runtime-es5.09d185272b2306805acd.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhStyles08e54aa5a9ab8359a20aCss reads file data from disk. It returns an error on failure.
func assetsZhStyles08e54aa5a9ab8359a20aCss() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\styles.08e54aa5a9ab8359a20a.css"
	name := "assets/zh/styles.08e54aa5a9ab8359a20a.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/en/3rdpartylicenses.txt":                             assetsEn3rdpartylicensesTxt,
	"assets/en/MaterialIcons-Regular.4674f8ded773cb03e824.eot":   assetsEnMaterialiconsRegular4674f8ded773cb03e824Eot,
	"assets/en/MaterialIcons-Regular.5e7382c63da0098d634a.ttf":   assetsEnMaterialiconsRegular5e7382c63da0098d634aTtf,
	"assets/en/MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff":  assetsEnMaterialiconsRegular83bebaf37c09c7e1c3eeWoff,
	"assets/en/MaterialIcons-Regular.cff684e59ffb052d72cb.woff2": assetsEnMaterialiconsRegularCff684e59ffb052d72cbWoff2,
	"assets/en/Roboto-Black.41ed1105a6ebb8ffe34e.woff2":          assetsEnRobotoBlack41ed1105a6ebb8ffe34eWoff2,
	"assets/en/Roboto-Black.937491dfcbe64ca9a9f1.woff":           assetsEnRobotoBlack937491dfcbe64ca9a9f1Woff,
	"assets/en/Roboto-BlackItalic.2e1ee657996854c6f427.woff":     assetsEnRobotoBlackitalic2e1ee657996854c6f427Woff,
	"assets/en/Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2":    assetsEnRobotoBlackitalic50ca4c51ebc27e7e7d2fWoff2,
	"assets/en/Roboto-Bold.73288d91c325e82a5b92.woff":            assetsEnRobotoBold73288d91c325e82a5b92Woff,
	"assets/en/Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2":           assetsEnRobotoBold92fbd4e93cf0a5dbebaaWoff2,
	"assets/en/Roboto-BoldItalic.5f600d98a73d800ae575.woff2":     assetsEnRobotoBolditalic5f600d98a73d800ae575Woff2,
	"assets/en/Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff":      assetsEnRobotoBolditalic6d89acbd21d7e3fbecb2Woff,
	"assets/en/Roboto-Light.c27d89ac77468ae18f28.woff2":          assetsEnRobotoLightC27d89ac77468ae18f28Woff2,
	"assets/en/Roboto-Light.d923dfafc0c5183b59aa.woff":           assetsEnRobotoLightD923dfafc0c5183b59aaWoff,
	"assets/en/Roboto-LightItalic.506274c7228cf81cae4d.woff2":    assetsEnRobotoLightitalic506274c7228cf81cae4dWoff2,
	"assets/en/Roboto-LightItalic.d4b8c137518d9d92bb28.woff":     assetsEnRobotoLightitalicD4b8c137518d9d92bb28Woff,
	"assets/en/Roboto-Medium.092c6130df8fd2199888.woff":          assetsEnRobotoMedium092c6130df8fd2199888Woff,
	"assets/en/Roboto-Medium.1d3bced88509b0838984.woff2":         assetsEnRobotoMedium1d3bced88509b0838984Woff2,
	"assets/en/Roboto-MediumItalic.18ff1628c628080166c1.woff":    assetsEnRobotoMediumitalic18ff1628c628080166c1Woff,
	"assets/en/Roboto-MediumItalic.d620b8f53f75966fe42e.woff2":   assetsEnRobotoMediumitalicD620b8f53f75966fe42eWoff2,
	"assets/en/Roboto-Regular.64cfb66c866ea50cad47.woff2":        assetsEnRobotoRegular64cfb66c866ea50cad47Woff2,
	"assets/en/Roboto-Regular.e02e9d6ff5547f7e9962.woff":         assetsEnRobotoRegularE02e9d6ff5547f7e9962Woff,
	"assets/en/Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2":  assetsEnRobotoRegularitalic4dd2af1e8df532f41db8Woff2,
	"assets/en/Roboto-RegularItalic.5ea38fff9eebef99c5df.woff":   assetsEnRobotoRegularitalic5ea38fff9eebef99c5dfWoff,
	"assets/en/Roboto-Thin.dbd56bd3357dc3617fe5.woff2":           assetsEnRobotoThinDbd56bd3357dc3617fe5Woff2,
	"assets/en/Roboto-Thin.e7f7c82374bd0ebef14b.woff":            assetsEnRobotoThinE7f7c82374bd0ebef14bWoff,
	"assets/en/Roboto-ThinItalic.5dd9349c940073834e9a.woff":      assetsEnRobotoThinitalic5dd9349c940073834e9aWoff,
	"assets/en/Roboto-ThinItalic.a8cef84f735ef887abdc.woff2":     assetsEnRobotoThinitalicA8cef84f735ef887abdcWoff2,
	"assets/en/assets/brand/mlt-logo-en-dark.svg":                assetsEnAssetsBrandMltLogoEnDarkSvg,
	"assets/en/assets/brand/mlt-logo-en-orig.svg":                assetsEnAssetsBrandMltLogoEnOrigSvg,
	"assets/en/assets/brand/mlt-logo-en.svg":                     assetsEnAssetsBrandMltLogoEnSvg,
	"assets/en/assets/brand/mlt-logo-ru-dark.svg":                assetsEnAssetsBrandMltLogoRuDarkSvg,
	"assets/en/assets/brand/mlt-logo-ru-orig.svg":                assetsEnAssetsBrandMltLogoRuOrigSvg,
	"assets/en/assets/brand/mlt-logo-ru.svg":                     assetsEnAssetsBrandMltLogoRuSvg,
	"assets/en/assets/brand/mlt-logo-zh-dark.svg":                assetsEnAssetsBrandMltLogoZhDarkSvg,
	"assets/en/assets/brand/mlt-logo-zh-orig.svg":                assetsEnAssetsBrandMltLogoZhOrigSvg,
	"assets/en/assets/brand/mlt-logo-zh.svg":                     assetsEnAssetsBrandMltLogoZhSvg,
	"assets/en/assets/flags/china_round_48.png":                  assetsEnAssetsFlagsChina_round_48Png,
	"assets/en/assets/flags/russia_round_48.png":                 assetsEnAssetsFlagsRussia_round_48Png,
	"assets/en/assets/flags/usa_round_48.png":                    assetsEnAssetsFlagsUsa_round_48Png,
	"assets/en/favicon.ico":                                      assetsEnFaviconIco,
	"assets/en/index.html":                                       assetsEnIndexHtml,
	"assets/en/main-es2015.1117eea21cfc86471a6c.js":              assetsEnMainEs20151117eea21cfc86471a6cJs,
	"assets/en/main-es5.1117eea21cfc86471a6c.js":                 assetsEnMainEs51117eea21cfc86471a6cJs,
	"assets/en/polyfills-es2015.10a07900b65aecac03a2.js":         assetsEnPolyfillsEs201510a07900b65aecac03a2Js,
	"assets/en/polyfills-es5.587222d5226b8496b799.js":            assetsEnPolyfillsEs5587222d5226b8496b799Js,
	"assets/en/runtime-es2015.09d185272b2306805acd.js":           assetsEnRuntimeEs201509d185272b2306805acdJs,
	"assets/en/runtime-es5.09d185272b2306805acd.js":              assetsEnRuntimeEs509d185272b2306805acdJs,
	"assets/en/styles.08e54aa5a9ab8359a20a.css":                  assetsEnStyles08e54aa5a9ab8359a20aCss,
	"assets/gotty/linux_amd64/gotty":                             assetsGottyLinux_amd64Gotty,
	"assets/gotty/linux_arm/gotty":                               assetsGottyLinux_armGotty,
	"assets/ru/3rdpartylicenses.txt":                             assetsRu3rdpartylicensesTxt,
	"assets/ru/MaterialIcons-Regular.4674f8ded773cb03e824.eot":   assetsRuMaterialiconsRegular4674f8ded773cb03e824Eot,
	"assets/ru/MaterialIcons-Regular.5e7382c63da0098d634a.ttf":   assetsRuMaterialiconsRegular5e7382c63da0098d634aTtf,
	"assets/ru/MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff":  assetsRuMaterialiconsRegular83bebaf37c09c7e1c3eeWoff,
	"assets/ru/MaterialIcons-Regular.cff684e59ffb052d72cb.woff2": assetsRuMaterialiconsRegularCff684e59ffb052d72cbWoff2,
	"assets/ru/Roboto-Black.41ed1105a6ebb8ffe34e.woff2":          assetsRuRobotoBlack41ed1105a6ebb8ffe34eWoff2,
	"assets/ru/Roboto-Black.937491dfcbe64ca9a9f1.woff":           assetsRuRobotoBlack937491dfcbe64ca9a9f1Woff,
	"assets/ru/Roboto-BlackItalic.2e1ee657996854c6f427.woff":     assetsRuRobotoBlackitalic2e1ee657996854c6f427Woff,
	"assets/ru/Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2":    assetsRuRobotoBlackitalic50ca4c51ebc27e7e7d2fWoff2,
	"assets/ru/Roboto-Bold.73288d91c325e82a5b92.woff":            assetsRuRobotoBold73288d91c325e82a5b92Woff,
	"assets/ru/Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2":           assetsRuRobotoBold92fbd4e93cf0a5dbebaaWoff2,
	"assets/ru/Roboto-BoldItalic.5f600d98a73d800ae575.woff2":     assetsRuRobotoBolditalic5f600d98a73d800ae575Woff2,
	"assets/ru/Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff":      assetsRuRobotoBolditalic6d89acbd21d7e3fbecb2Woff,
	"assets/ru/Roboto-Light.c27d89ac77468ae18f28.woff2":          assetsRuRobotoLightC27d89ac77468ae18f28Woff2,
	"assets/ru/Roboto-Light.d923dfafc0c5183b59aa.woff":           assetsRuRobotoLightD923dfafc0c5183b59aaWoff,
	"assets/ru/Roboto-LightItalic.506274c7228cf81cae4d.woff2":    assetsRuRobotoLightitalic506274c7228cf81cae4dWoff2,
	"assets/ru/Roboto-LightItalic.d4b8c137518d9d92bb28.woff":     assetsRuRobotoLightitalicD4b8c137518d9d92bb28Woff,
	"assets/ru/Roboto-Medium.092c6130df8fd2199888.woff":          assetsRuRobotoMedium092c6130df8fd2199888Woff,
	"assets/ru/Roboto-Medium.1d3bced88509b0838984.woff2":         assetsRuRobotoMedium1d3bced88509b0838984Woff2,
	"assets/ru/Roboto-MediumItalic.18ff1628c628080166c1.woff":    assetsRuRobotoMediumitalic18ff1628c628080166c1Woff,
	"assets/ru/Roboto-MediumItalic.d620b8f53f75966fe42e.woff2":   assetsRuRobotoMediumitalicD620b8f53f75966fe42eWoff2,
	"assets/ru/Roboto-Regular.64cfb66c866ea50cad47.woff2":        assetsRuRobotoRegular64cfb66c866ea50cad47Woff2,
	"assets/ru/Roboto-Regular.e02e9d6ff5547f7e9962.woff":         assetsRuRobotoRegularE02e9d6ff5547f7e9962Woff,
	"assets/ru/Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2":  assetsRuRobotoRegularitalic4dd2af1e8df532f41db8Woff2,
	"assets/ru/Roboto-RegularItalic.5ea38fff9eebef99c5df.woff":   assetsRuRobotoRegularitalic5ea38fff9eebef99c5dfWoff,
	"assets/ru/Roboto-Thin.dbd56bd3357dc3617fe5.woff2":           assetsRuRobotoThinDbd56bd3357dc3617fe5Woff2,
	"assets/ru/Roboto-Thin.e7f7c82374bd0ebef14b.woff":            assetsRuRobotoThinE7f7c82374bd0ebef14bWoff,
	"assets/ru/Roboto-ThinItalic.5dd9349c940073834e9a.woff":      assetsRuRobotoThinitalic5dd9349c940073834e9aWoff,
	"assets/ru/Roboto-ThinItalic.a8cef84f735ef887abdc.woff2":     assetsRuRobotoThinitalicA8cef84f735ef887abdcWoff2,
	"assets/ru/assets/brand/mlt-logo-en-dark.svg":                assetsRuAssetsBrandMltLogoEnDarkSvg,
	"assets/ru/assets/brand/mlt-logo-en-orig.svg":                assetsRuAssetsBrandMltLogoEnOrigSvg,
	"assets/ru/assets/brand/mlt-logo-en.svg":                     assetsRuAssetsBrandMltLogoEnSvg,
	"assets/ru/assets/brand/mlt-logo-ru-dark.svg":                assetsRuAssetsBrandMltLogoRuDarkSvg,
	"assets/ru/assets/brand/mlt-logo-ru-orig.svg":                assetsRuAssetsBrandMltLogoRuOrigSvg,
	"assets/ru/assets/brand/mlt-logo-ru.svg":                     assetsRuAssetsBrandMltLogoRuSvg,
	"assets/ru/assets/brand/mlt-logo-zh-dark.svg":                assetsRuAssetsBrandMltLogoZhDarkSvg,
	"assets/ru/assets/brand/mlt-logo-zh-orig.svg":                assetsRuAssetsBrandMltLogoZhOrigSvg,
	"assets/ru/assets/brand/mlt-logo-zh.svg":                     assetsRuAssetsBrandMltLogoZhSvg,
	"assets/ru/assets/flags/china_round_48.png":                  assetsRuAssetsFlagsChina_round_48Png,
	"assets/ru/assets/flags/russia_round_48.png":                 assetsRuAssetsFlagsRussia_round_48Png,
	"assets/ru/assets/flags/usa_round_48.png":                    assetsRuAssetsFlagsUsa_round_48Png,
	"assets/ru/favicon.ico":                                      assetsRuFaviconIco,
	"assets/ru/index.html":                                       assetsRuIndexHtml,
	"assets/ru/main-es2015.1117eea21cfc86471a6c.js":              assetsRuMainEs20151117eea21cfc86471a6cJs,
	"assets/ru/main-es5.1117eea21cfc86471a6c.js":                 assetsRuMainEs51117eea21cfc86471a6cJs,
	"assets/ru/polyfills-es2015.10a07900b65aecac03a2.js":         assetsRuPolyfillsEs201510a07900b65aecac03a2Js,
	"assets/ru/polyfills-es5.587222d5226b8496b799.js":            assetsRuPolyfillsEs5587222d5226b8496b799Js,
	"assets/ru/runtime-es2015.09d185272b2306805acd.js":           assetsRuRuntimeEs201509d185272b2306805acdJs,
	"assets/ru/runtime-es5.09d185272b2306805acd.js":              assetsRuRuntimeEs509d185272b2306805acdJs,
	"assets/ru/styles.08e54aa5a9ab8359a20a.css":                  assetsRuStyles08e54aa5a9ab8359a20aCss,
	"assets/zh/3rdpartylicenses.txt":                             assetsZh3rdpartylicensesTxt,
	"assets/zh/MaterialIcons-Regular.4674f8ded773cb03e824.eot":   assetsZhMaterialiconsRegular4674f8ded773cb03e824Eot,
	"assets/zh/MaterialIcons-Regular.5e7382c63da0098d634a.ttf":   assetsZhMaterialiconsRegular5e7382c63da0098d634aTtf,
	"assets/zh/MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff":  assetsZhMaterialiconsRegular83bebaf37c09c7e1c3eeWoff,
	"assets/zh/MaterialIcons-Regular.cff684e59ffb052d72cb.woff2": assetsZhMaterialiconsRegularCff684e59ffb052d72cbWoff2,
	"assets/zh/Roboto-Black.41ed1105a6ebb8ffe34e.woff2":          assetsZhRobotoBlack41ed1105a6ebb8ffe34eWoff2,
	"assets/zh/Roboto-Black.937491dfcbe64ca9a9f1.woff":           assetsZhRobotoBlack937491dfcbe64ca9a9f1Woff,
	"assets/zh/Roboto-BlackItalic.2e1ee657996854c6f427.woff":     assetsZhRobotoBlackitalic2e1ee657996854c6f427Woff,
	"assets/zh/Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2":    assetsZhRobotoBlackitalic50ca4c51ebc27e7e7d2fWoff2,
	"assets/zh/Roboto-Bold.73288d91c325e82a5b92.woff":            assetsZhRobotoBold73288d91c325e82a5b92Woff,
	"assets/zh/Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2":           assetsZhRobotoBold92fbd4e93cf0a5dbebaaWoff2,
	"assets/zh/Roboto-BoldItalic.5f600d98a73d800ae575.woff2":     assetsZhRobotoBolditalic5f600d98a73d800ae575Woff2,
	"assets/zh/Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff":      assetsZhRobotoBolditalic6d89acbd21d7e3fbecb2Woff,
	"assets/zh/Roboto-Light.c27d89ac77468ae18f28.woff2":          assetsZhRobotoLightC27d89ac77468ae18f28Woff2,
	"assets/zh/Roboto-Light.d923dfafc0c5183b59aa.woff":           assetsZhRobotoLightD923dfafc0c5183b59aaWoff,
	"assets/zh/Roboto-LightItalic.506274c7228cf81cae4d.woff2":    assetsZhRobotoLightitalic506274c7228cf81cae4dWoff2,
	"assets/zh/Roboto-LightItalic.d4b8c137518d9d92bb28.woff":     assetsZhRobotoLightitalicD4b8c137518d9d92bb28Woff,
	"assets/zh/Roboto-Medium.092c6130df8fd2199888.woff":          assetsZhRobotoMedium092c6130df8fd2199888Woff,
	"assets/zh/Roboto-Medium.1d3bced88509b0838984.woff2":         assetsZhRobotoMedium1d3bced88509b0838984Woff2,
	"assets/zh/Roboto-MediumItalic.18ff1628c628080166c1.woff":    assetsZhRobotoMediumitalic18ff1628c628080166c1Woff,
	"assets/zh/Roboto-MediumItalic.d620b8f53f75966fe42e.woff2":   assetsZhRobotoMediumitalicD620b8f53f75966fe42eWoff2,
	"assets/zh/Roboto-Regular.64cfb66c866ea50cad47.woff2":        assetsZhRobotoRegular64cfb66c866ea50cad47Woff2,
	"assets/zh/Roboto-Regular.e02e9d6ff5547f7e9962.woff":         assetsZhRobotoRegularE02e9d6ff5547f7e9962Woff,
	"assets/zh/Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2":  assetsZhRobotoRegularitalic4dd2af1e8df532f41db8Woff2,
	"assets/zh/Roboto-RegularItalic.5ea38fff9eebef99c5df.woff":   assetsZhRobotoRegularitalic5ea38fff9eebef99c5dfWoff,
	"assets/zh/Roboto-Thin.dbd56bd3357dc3617fe5.woff2":           assetsZhRobotoThinDbd56bd3357dc3617fe5Woff2,
	"assets/zh/Roboto-Thin.e7f7c82374bd0ebef14b.woff":            assetsZhRobotoThinE7f7c82374bd0ebef14bWoff,
	"assets/zh/Roboto-ThinItalic.5dd9349c940073834e9a.woff":      assetsZhRobotoThinitalic5dd9349c940073834e9aWoff,
	"assets/zh/Roboto-ThinItalic.a8cef84f735ef887abdc.woff2":     assetsZhRobotoThinitalicA8cef84f735ef887abdcWoff2,
	"assets/zh/assets/brand/mlt-logo-en-dark.svg":                assetsZhAssetsBrandMltLogoEnDarkSvg,
	"assets/zh/assets/brand/mlt-logo-en-orig.svg":                assetsZhAssetsBrandMltLogoEnOrigSvg,
	"assets/zh/assets/brand/mlt-logo-en.svg":                     assetsZhAssetsBrandMltLogoEnSvg,
	"assets/zh/assets/brand/mlt-logo-ru-dark.svg":                assetsZhAssetsBrandMltLogoRuDarkSvg,
	"assets/zh/assets/brand/mlt-logo-ru-orig.svg":                assetsZhAssetsBrandMltLogoRuOrigSvg,
	"assets/zh/assets/brand/mlt-logo-ru.svg":                     assetsZhAssetsBrandMltLogoRuSvg,
	"assets/zh/assets/brand/mlt-logo-zh-dark.svg":                assetsZhAssetsBrandMltLogoZhDarkSvg,
	"assets/zh/assets/brand/mlt-logo-zh-orig.svg":                assetsZhAssetsBrandMltLogoZhOrigSvg,
	"assets/zh/assets/brand/mlt-logo-zh.svg":                     assetsZhAssetsBrandMltLogoZhSvg,
	"assets/zh/assets/flags/china_round_48.png":                  assetsZhAssetsFlagsChina_round_48Png,
	"assets/zh/assets/flags/russia_round_48.png":                 assetsZhAssetsFlagsRussia_round_48Png,
	"assets/zh/assets/flags/usa_round_48.png":                    assetsZhAssetsFlagsUsa_round_48Png,
	"assets/zh/favicon.ico":                                      assetsZhFaviconIco,
	"assets/zh/index.html":                                       assetsZhIndexHtml,
	"assets/zh/main-es2015.1117eea21cfc86471a6c.js":              assetsZhMainEs20151117eea21cfc86471a6cJs,
	"assets/zh/main-es5.1117eea21cfc86471a6c.js":                 assetsZhMainEs51117eea21cfc86471a6cJs,
	"assets/zh/polyfills-es2015.10a07900b65aecac03a2.js":         assetsZhPolyfillsEs201510a07900b65aecac03a2Js,
	"assets/zh/polyfills-es5.587222d5226b8496b799.js":            assetsZhPolyfillsEs5587222d5226b8496b799Js,
	"assets/zh/runtime-es2015.09d185272b2306805acd.js":           assetsZhRuntimeEs201509d185272b2306805acdJs,
	"assets/zh/runtime-es5.09d185272b2306805acd.js":              assetsZhRuntimeEs509d185272b2306805acdJs,
	"assets/zh/styles.08e54aa5a9ab8359a20a.css":                  assetsZhStyles08e54aa5a9ab8359a20aCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"en": &bintree{nil, map[string]*bintree{
			"3rdpartylicenses.txt":                             &bintree{assetsEn3rdpartylicensesTxt, map[string]*bintree{}},
			"MaterialIcons-Regular.4674f8ded773cb03e824.eot":   &bintree{assetsEnMaterialiconsRegular4674f8ded773cb03e824Eot, map[string]*bintree{}},
			"MaterialIcons-Regular.5e7382c63da0098d634a.ttf":   &bintree{assetsEnMaterialiconsRegular5e7382c63da0098d634aTtf, map[string]*bintree{}},
			"MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff":  &bintree{assetsEnMaterialiconsRegular83bebaf37c09c7e1c3eeWoff, map[string]*bintree{}},
			"MaterialIcons-Regular.cff684e59ffb052d72cb.woff2": &bintree{assetsEnMaterialiconsRegularCff684e59ffb052d72cbWoff2, map[string]*bintree{}},
			"Roboto-Black.41ed1105a6ebb8ffe34e.woff2":          &bintree{assetsEnRobotoBlack41ed1105a6ebb8ffe34eWoff2, map[string]*bintree{}},
			"Roboto-Black.937491dfcbe64ca9a9f1.woff":           &bintree{assetsEnRobotoBlack937491dfcbe64ca9a9f1Woff, map[string]*bintree{}},
			"Roboto-BlackItalic.2e1ee657996854c6f427.woff":     &bintree{assetsEnRobotoBlackitalic2e1ee657996854c6f427Woff, map[string]*bintree{}},
			"Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2":    &bintree{assetsEnRobotoBlackitalic50ca4c51ebc27e7e7d2fWoff2, map[string]*bintree{}},
			"Roboto-Bold.73288d91c325e82a5b92.woff":            &bintree{assetsEnRobotoBold73288d91c325e82a5b92Woff, map[string]*bintree{}},
			"Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2":           &bintree{assetsEnRobotoBold92fbd4e93cf0a5dbebaaWoff2, map[string]*bintree{}},
			"Roboto-BoldItalic.5f600d98a73d800ae575.woff2":     &bintree{assetsEnRobotoBolditalic5f600d98a73d800ae575Woff2, map[string]*bintree{}},
			"Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff":      &bintree{assetsEnRobotoBolditalic6d89acbd21d7e3fbecb2Woff, map[string]*bintree{}},
			"Roboto-Light.c27d89ac77468ae18f28.woff2":          &bintree{assetsEnRobotoLightC27d89ac77468ae18f28Woff2, map[string]*bintree{}},
			"Roboto-Light.d923dfafc0c5183b59aa.woff":           &bintree{assetsEnRobotoLightD923dfafc0c5183b59aaWoff, map[string]*bintree{}},
			"Roboto-LightItalic.506274c7228cf81cae4d.woff2":    &bintree{assetsEnRobotoLightitalic506274c7228cf81cae4dWoff2, map[string]*bintree{}},
			"Roboto-LightItalic.d4b8c137518d9d92bb28.woff":     &bintree{assetsEnRobotoLightitalicD4b8c137518d9d92bb28Woff, map[string]*bintree{}},
			"Roboto-Medium.092c6130df8fd2199888.woff":          &bintree{assetsEnRobotoMedium092c6130df8fd2199888Woff, map[string]*bintree{}},
			"Roboto-Medium.1d3bced88509b0838984.woff2":         &bintree{assetsEnRobotoMedium1d3bced88509b0838984Woff2, map[string]*bintree{}},
			"Roboto-MediumItalic.18ff1628c628080166c1.woff":    &bintree{assetsEnRobotoMediumitalic18ff1628c628080166c1Woff, map[string]*bintree{}},
			"Roboto-MediumItalic.d620b8f53f75966fe42e.woff2":   &bintree{assetsEnRobotoMediumitalicD620b8f53f75966fe42eWoff2, map[string]*bintree{}},
			"Roboto-Regular.64cfb66c866ea50cad47.woff2":        &bintree{assetsEnRobotoRegular64cfb66c866ea50cad47Woff2, map[string]*bintree{}},
			"Roboto-Regular.e02e9d6ff5547f7e9962.woff":         &bintree{assetsEnRobotoRegularE02e9d6ff5547f7e9962Woff, map[string]*bintree{}},
			"Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2":  &bintree{assetsEnRobotoRegularitalic4dd2af1e8df532f41db8Woff2, map[string]*bintree{}},
			"Roboto-RegularItalic.5ea38fff9eebef99c5df.woff":   &bintree{assetsEnRobotoRegularitalic5ea38fff9eebef99c5dfWoff, map[string]*bintree{}},
			"Roboto-Thin.dbd56bd3357dc3617fe5.woff2":           &bintree{assetsEnRobotoThinDbd56bd3357dc3617fe5Woff2, map[string]*bintree{}},
			"Roboto-Thin.e7f7c82374bd0ebef14b.woff":            &bintree{assetsEnRobotoThinE7f7c82374bd0ebef14bWoff, map[string]*bintree{}},
			"Roboto-ThinItalic.5dd9349c940073834e9a.woff":      &bintree{assetsEnRobotoThinitalic5dd9349c940073834e9aWoff, map[string]*bintree{}},
			"Roboto-ThinItalic.a8cef84f735ef887abdc.woff2":     &bintree{assetsEnRobotoThinitalicA8cef84f735ef887abdcWoff2, map[string]*bintree{}},
			"assets": &bintree{nil, map[string]*bintree{
				"brand": &bintree{nil, map[string]*bintree{
					"mlt-logo-en-dark.svg": &bintree{assetsEnAssetsBrandMltLogoEnDarkSvg, map[string]*bintree{}},
					"mlt-logo-en-orig.svg": &bintree{assetsEnAssetsBrandMltLogoEnOrigSvg, map[string]*bintree{}},
					"mlt-logo-en.svg":      &bintree{assetsEnAssetsBrandMltLogoEnSvg, map[string]*bintree{}},
					"mlt-logo-ru-dark.svg": &bintree{assetsEnAssetsBrandMltLogoRuDarkSvg, map[string]*bintree{}},
					"mlt-logo-ru-orig.svg": &bintree{assetsEnAssetsBrandMltLogoRuOrigSvg, map[string]*bintree{}},
					"mlt-logo-ru.svg":      &bintree{assetsEnAssetsBrandMltLogoRuSvg, map[string]*bintree{}},
					"mlt-logo-zh-dark.svg": &bintree{assetsEnAssetsBrandMltLogoZhDarkSvg, map[string]*bintree{}},
					"mlt-logo-zh-orig.svg": &bintree{assetsEnAssetsBrandMltLogoZhOrigSvg, map[string]*bintree{}},
					"mlt-logo-zh.svg":      &bintree{assetsEnAssetsBrandMltLogoZhSvg, map[string]*bintree{}},
				}},
				"flags": &bintree{nil, map[string]*bintree{
					"china_round_48.png":  &bintree{assetsEnAssetsFlagsChina_round_48Png, map[string]*bintree{}},
					"russia_round_48.png": &bintree{assetsEnAssetsFlagsRussia_round_48Png, map[string]*bintree{}},
					"usa_round_48.png":    &bintree{assetsEnAssetsFlagsUsa_round_48Png, map[string]*bintree{}},
				}},
			}},
			"favicon.ico":                              &bintree{assetsEnFaviconIco, map[string]*bintree{}},
			"index.html":                               &bintree{assetsEnIndexHtml, map[string]*bintree{}},
			"main-es2015.1117eea21cfc86471a6c.js":      &bintree{assetsEnMainEs20151117eea21cfc86471a6cJs, map[string]*bintree{}},
			"main-es5.1117eea21cfc86471a6c.js":         &bintree{assetsEnMainEs51117eea21cfc86471a6cJs, map[string]*bintree{}},
			"polyfills-es2015.10a07900b65aecac03a2.js": &bintree{assetsEnPolyfillsEs201510a07900b65aecac03a2Js, map[string]*bintree{}},
			"polyfills-es5.587222d5226b8496b799.js":    &bintree{assetsEnPolyfillsEs5587222d5226b8496b799Js, map[string]*bintree{}},
			"runtime-es2015.09d185272b2306805acd.js":   &bintree{assetsEnRuntimeEs201509d185272b2306805acdJs, map[string]*bintree{}},
			"runtime-es5.09d185272b2306805acd.js":      &bintree{assetsEnRuntimeEs509d185272b2306805acdJs, map[string]*bintree{}},
			"styles.08e54aa5a9ab8359a20a.css":          &bintree{assetsEnStyles08e54aa5a9ab8359a20aCss, map[string]*bintree{}},
		}},
		"gotty": &bintree{nil, map[string]*bintree{
			"linux_amd64": &bintree{nil, map[string]*bintree{
				"gotty": &bintree{assetsGottyLinux_amd64Gotty, map[string]*bintree{}},
			}},
			"linux_arm": &bintree{nil, map[string]*bintree{
				"gotty": &bintree{assetsGottyLinux_armGotty, map[string]*bintree{}},
			}},
		}},
		"ru": &bintree{nil, map[string]*bintree{
			"3rdpartylicenses.txt":                             &bintree{assetsRu3rdpartylicensesTxt, map[string]*bintree{}},
			"MaterialIcons-Regular.4674f8ded773cb03e824.eot":   &bintree{assetsRuMaterialiconsRegular4674f8ded773cb03e824Eot, map[string]*bintree{}},
			"MaterialIcons-Regular.5e7382c63da0098d634a.ttf":   &bintree{assetsRuMaterialiconsRegular5e7382c63da0098d634aTtf, map[string]*bintree{}},
			"MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff":  &bintree{assetsRuMaterialiconsRegular83bebaf37c09c7e1c3eeWoff, map[string]*bintree{}},
			"MaterialIcons-Regular.cff684e59ffb052d72cb.woff2": &bintree{assetsRuMaterialiconsRegularCff684e59ffb052d72cbWoff2, map[string]*bintree{}},
			"Roboto-Black.41ed1105a6ebb8ffe34e.woff2":          &bintree{assetsRuRobotoBlack41ed1105a6ebb8ffe34eWoff2, map[string]*bintree{}},
			"Roboto-Black.937491dfcbe64ca9a9f1.woff":           &bintree{assetsRuRobotoBlack937491dfcbe64ca9a9f1Woff, map[string]*bintree{}},
			"Roboto-BlackItalic.2e1ee657996854c6f427.woff":     &bintree{assetsRuRobotoBlackitalic2e1ee657996854c6f427Woff, map[string]*bintree{}},
			"Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2":    &bintree{assetsRuRobotoBlackitalic50ca4c51ebc27e7e7d2fWoff2, map[string]*bintree{}},
			"Roboto-Bold.73288d91c325e82a5b92.woff":            &bintree{assetsRuRobotoBold73288d91c325e82a5b92Woff, map[string]*bintree{}},
			"Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2":           &bintree{assetsRuRobotoBold92fbd4e93cf0a5dbebaaWoff2, map[string]*bintree{}},
			"Roboto-BoldItalic.5f600d98a73d800ae575.woff2":     &bintree{assetsRuRobotoBolditalic5f600d98a73d800ae575Woff2, map[string]*bintree{}},
			"Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff":      &bintree{assetsRuRobotoBolditalic6d89acbd21d7e3fbecb2Woff, map[string]*bintree{}},
			"Roboto-Light.c27d89ac77468ae18f28.woff2":          &bintree{assetsRuRobotoLightC27d89ac77468ae18f28Woff2, map[string]*bintree{}},
			"Roboto-Light.d923dfafc0c5183b59aa.woff":           &bintree{assetsRuRobotoLightD923dfafc0c5183b59aaWoff, map[string]*bintree{}},
			"Roboto-LightItalic.506274c7228cf81cae4d.woff2":    &bintree{assetsRuRobotoLightitalic506274c7228cf81cae4dWoff2, map[string]*bintree{}},
			"Roboto-LightItalic.d4b8c137518d9d92bb28.woff":     &bintree{assetsRuRobotoLightitalicD4b8c137518d9d92bb28Woff, map[string]*bintree{}},
			"Roboto-Medium.092c6130df8fd2199888.woff":          &bintree{assetsRuRobotoMedium092c6130df8fd2199888Woff, map[string]*bintree{}},
			"Roboto-Medium.1d3bced88509b0838984.woff2":         &bintree{assetsRuRobotoMedium1d3bced88509b0838984Woff2, map[string]*bintree{}},
			"Roboto-MediumItalic.18ff1628c628080166c1.woff":    &bintree{assetsRuRobotoMediumitalic18ff1628c628080166c1Woff, map[string]*bintree{}},
			"Roboto-MediumItalic.d620b8f53f75966fe42e.woff2":   &bintree{assetsRuRobotoMediumitalicD620b8f53f75966fe42eWoff2, map[string]*bintree{}},
			"Roboto-Regular.64cfb66c866ea50cad47.woff2":        &bintree{assetsRuRobotoRegular64cfb66c866ea50cad47Woff2, map[string]*bintree{}},
			"Roboto-Regular.e02e9d6ff5547f7e9962.woff":         &bintree{assetsRuRobotoRegularE02e9d6ff5547f7e9962Woff, map[string]*bintree{}},
			"Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2":  &bintree{assetsRuRobotoRegularitalic4dd2af1e8df532f41db8Woff2, map[string]*bintree{}},
			"Roboto-RegularItalic.5ea38fff9eebef99c5df.woff":   &bintree{assetsRuRobotoRegularitalic5ea38fff9eebef99c5dfWoff, map[string]*bintree{}},
			"Roboto-Thin.dbd56bd3357dc3617fe5.woff2":           &bintree{assetsRuRobotoThinDbd56bd3357dc3617fe5Woff2, map[string]*bintree{}},
			"Roboto-Thin.e7f7c82374bd0ebef14b.woff":            &bintree{assetsRuRobotoThinE7f7c82374bd0ebef14bWoff, map[string]*bintree{}},
			"Roboto-ThinItalic.5dd9349c940073834e9a.woff":      &bintree{assetsRuRobotoThinitalic5dd9349c940073834e9aWoff, map[string]*bintree{}},
			"Roboto-ThinItalic.a8cef84f735ef887abdc.woff2":     &bintree{assetsRuRobotoThinitalicA8cef84f735ef887abdcWoff2, map[string]*bintree{}},
			"assets": &bintree{nil, map[string]*bintree{
				"brand": &bintree{nil, map[string]*bintree{
					"mlt-logo-en-dark.svg": &bintree{assetsRuAssetsBrandMltLogoEnDarkSvg, map[string]*bintree{}},
					"mlt-logo-en-orig.svg": &bintree{assetsRuAssetsBrandMltLogoEnOrigSvg, map[string]*bintree{}},
					"mlt-logo-en.svg":      &bintree{assetsRuAssetsBrandMltLogoEnSvg, map[string]*bintree{}},
					"mlt-logo-ru-dark.svg": &bintree{assetsRuAssetsBrandMltLogoRuDarkSvg, map[string]*bintree{}},
					"mlt-logo-ru-orig.svg": &bintree{assetsRuAssetsBrandMltLogoRuOrigSvg, map[string]*bintree{}},
					"mlt-logo-ru.svg":      &bintree{assetsRuAssetsBrandMltLogoRuSvg, map[string]*bintree{}},
					"mlt-logo-zh-dark.svg": &bintree{assetsRuAssetsBrandMltLogoZhDarkSvg, map[string]*bintree{}},
					"mlt-logo-zh-orig.svg": &bintree{assetsRuAssetsBrandMltLogoZhOrigSvg, map[string]*bintree{}},
					"mlt-logo-zh.svg":      &bintree{assetsRuAssetsBrandMltLogoZhSvg, map[string]*bintree{}},
				}},
				"flags": &bintree{nil, map[string]*bintree{
					"china_round_48.png":  &bintree{assetsRuAssetsFlagsChina_round_48Png, map[string]*bintree{}},
					"russia_round_48.png": &bintree{assetsRuAssetsFlagsRussia_round_48Png, map[string]*bintree{}},
					"usa_round_48.png":    &bintree{assetsRuAssetsFlagsUsa_round_48Png, map[string]*bintree{}},
				}},
			}},
			"favicon.ico":                              &bintree{assetsRuFaviconIco, map[string]*bintree{}},
			"index.html":                               &bintree{assetsRuIndexHtml, map[string]*bintree{}},
			"main-es2015.1117eea21cfc86471a6c.js":      &bintree{assetsRuMainEs20151117eea21cfc86471a6cJs, map[string]*bintree{}},
			"main-es5.1117eea21cfc86471a6c.js":         &bintree{assetsRuMainEs51117eea21cfc86471a6cJs, map[string]*bintree{}},
			"polyfills-es2015.10a07900b65aecac03a2.js": &bintree{assetsRuPolyfillsEs201510a07900b65aecac03a2Js, map[string]*bintree{}},
			"polyfills-es5.587222d5226b8496b799.js":    &bintree{assetsRuPolyfillsEs5587222d5226b8496b799Js, map[string]*bintree{}},
			"runtime-es2015.09d185272b2306805acd.js":   &bintree{assetsRuRuntimeEs201509d185272b2306805acdJs, map[string]*bintree{}},
			"runtime-es5.09d185272b2306805acd.js":      &bintree{assetsRuRuntimeEs509d185272b2306805acdJs, map[string]*bintree{}},
			"styles.08e54aa5a9ab8359a20a.css":          &bintree{assetsRuStyles08e54aa5a9ab8359a20aCss, map[string]*bintree{}},
		}},
		"zh": &bintree{nil, map[string]*bintree{
			"3rdpartylicenses.txt":                             &bintree{assetsZh3rdpartylicensesTxt, map[string]*bintree{}},
			"MaterialIcons-Regular.4674f8ded773cb03e824.eot":   &bintree{assetsZhMaterialiconsRegular4674f8ded773cb03e824Eot, map[string]*bintree{}},
			"MaterialIcons-Regular.5e7382c63da0098d634a.ttf":   &bintree{assetsZhMaterialiconsRegular5e7382c63da0098d634aTtf, map[string]*bintree{}},
			"MaterialIcons-Regular.83bebaf37c09c7e1c3ee.woff":  &bintree{assetsZhMaterialiconsRegular83bebaf37c09c7e1c3eeWoff, map[string]*bintree{}},
			"MaterialIcons-Regular.cff684e59ffb052d72cb.woff2": &bintree{assetsZhMaterialiconsRegularCff684e59ffb052d72cbWoff2, map[string]*bintree{}},
			"Roboto-Black.41ed1105a6ebb8ffe34e.woff2":          &bintree{assetsZhRobotoBlack41ed1105a6ebb8ffe34eWoff2, map[string]*bintree{}},
			"Roboto-Black.937491dfcbe64ca9a9f1.woff":           &bintree{assetsZhRobotoBlack937491dfcbe64ca9a9f1Woff, map[string]*bintree{}},
			"Roboto-BlackItalic.2e1ee657996854c6f427.woff":     &bintree{assetsZhRobotoBlackitalic2e1ee657996854c6f427Woff, map[string]*bintree{}},
			"Roboto-BlackItalic.50ca4c51ebc27e7e7d2f.woff2":    &bintree{assetsZhRobotoBlackitalic50ca4c51ebc27e7e7d2fWoff2, map[string]*bintree{}},
			"Roboto-Bold.73288d91c325e82a5b92.woff":            &bintree{assetsZhRobotoBold73288d91c325e82a5b92Woff, map[string]*bintree{}},
			"Roboto-Bold.92fbd4e93cf0a5dbebaa.woff2":           &bintree{assetsZhRobotoBold92fbd4e93cf0a5dbebaaWoff2, map[string]*bintree{}},
			"Roboto-BoldItalic.5f600d98a73d800ae575.woff2":     &bintree{assetsZhRobotoBolditalic5f600d98a73d800ae575Woff2, map[string]*bintree{}},
			"Roboto-BoldItalic.6d89acbd21d7e3fbecb2.woff":      &bintree{assetsZhRobotoBolditalic6d89acbd21d7e3fbecb2Woff, map[string]*bintree{}},
			"Roboto-Light.c27d89ac77468ae18f28.woff2":          &bintree{assetsZhRobotoLightC27d89ac77468ae18f28Woff2, map[string]*bintree{}},
			"Roboto-Light.d923dfafc0c5183b59aa.woff":           &bintree{assetsZhRobotoLightD923dfafc0c5183b59aaWoff, map[string]*bintree{}},
			"Roboto-LightItalic.506274c7228cf81cae4d.woff2":    &bintree{assetsZhRobotoLightitalic506274c7228cf81cae4dWoff2, map[string]*bintree{}},
			"Roboto-LightItalic.d4b8c137518d9d92bb28.woff":     &bintree{assetsZhRobotoLightitalicD4b8c137518d9d92bb28Woff, map[string]*bintree{}},
			"Roboto-Medium.092c6130df8fd2199888.woff":          &bintree{assetsZhRobotoMedium092c6130df8fd2199888Woff, map[string]*bintree{}},
			"Roboto-Medium.1d3bced88509b0838984.woff2":         &bintree{assetsZhRobotoMedium1d3bced88509b0838984Woff2, map[string]*bintree{}},
			"Roboto-MediumItalic.18ff1628c628080166c1.woff":    &bintree{assetsZhRobotoMediumitalic18ff1628c628080166c1Woff, map[string]*bintree{}},
			"Roboto-MediumItalic.d620b8f53f75966fe42e.woff2":   &bintree{assetsZhRobotoMediumitalicD620b8f53f75966fe42eWoff2, map[string]*bintree{}},
			"Roboto-Regular.64cfb66c866ea50cad47.woff2":        &bintree{assetsZhRobotoRegular64cfb66c866ea50cad47Woff2, map[string]*bintree{}},
			"Roboto-Regular.e02e9d6ff5547f7e9962.woff":         &bintree{assetsZhRobotoRegularE02e9d6ff5547f7e9962Woff, map[string]*bintree{}},
			"Roboto-RegularItalic.4dd2af1e8df532f41db8.woff2":  &bintree{assetsZhRobotoRegularitalic4dd2af1e8df532f41db8Woff2, map[string]*bintree{}},
			"Roboto-RegularItalic.5ea38fff9eebef99c5df.woff":   &bintree{assetsZhRobotoRegularitalic5ea38fff9eebef99c5dfWoff, map[string]*bintree{}},
			"Roboto-Thin.dbd56bd3357dc3617fe5.woff2":           &bintree{assetsZhRobotoThinDbd56bd3357dc3617fe5Woff2, map[string]*bintree{}},
			"Roboto-Thin.e7f7c82374bd0ebef14b.woff":            &bintree{assetsZhRobotoThinE7f7c82374bd0ebef14bWoff, map[string]*bintree{}},
			"Roboto-ThinItalic.5dd9349c940073834e9a.woff":      &bintree{assetsZhRobotoThinitalic5dd9349c940073834e9aWoff, map[string]*bintree{}},
			"Roboto-ThinItalic.a8cef84f735ef887abdc.woff2":     &bintree{assetsZhRobotoThinitalicA8cef84f735ef887abdcWoff2, map[string]*bintree{}},
			"assets": &bintree{nil, map[string]*bintree{
				"brand": &bintree{nil, map[string]*bintree{
					"mlt-logo-en-dark.svg": &bintree{assetsZhAssetsBrandMltLogoEnDarkSvg, map[string]*bintree{}},
					"mlt-logo-en-orig.svg": &bintree{assetsZhAssetsBrandMltLogoEnOrigSvg, map[string]*bintree{}},
					"mlt-logo-en.svg":      &bintree{assetsZhAssetsBrandMltLogoEnSvg, map[string]*bintree{}},
					"mlt-logo-ru-dark.svg": &bintree{assetsZhAssetsBrandMltLogoRuDarkSvg, map[string]*bintree{}},
					"mlt-logo-ru-orig.svg": &bintree{assetsZhAssetsBrandMltLogoRuOrigSvg, map[string]*bintree{}},
					"mlt-logo-ru.svg":      &bintree{assetsZhAssetsBrandMltLogoRuSvg, map[string]*bintree{}},
					"mlt-logo-zh-dark.svg": &bintree{assetsZhAssetsBrandMltLogoZhDarkSvg, map[string]*bintree{}},
					"mlt-logo-zh-orig.svg": &bintree{assetsZhAssetsBrandMltLogoZhOrigSvg, map[string]*bintree{}},
					"mlt-logo-zh.svg":      &bintree{assetsZhAssetsBrandMltLogoZhSvg, map[string]*bintree{}},
				}},
				"flags": &bintree{nil, map[string]*bintree{
					"china_round_48.png":  &bintree{assetsZhAssetsFlagsChina_round_48Png, map[string]*bintree{}},
					"russia_round_48.png": &bintree{assetsZhAssetsFlagsRussia_round_48Png, map[string]*bintree{}},
					"usa_round_48.png":    &bintree{assetsZhAssetsFlagsUsa_round_48Png, map[string]*bintree{}},
				}},
			}},
			"favicon.ico":                              &bintree{assetsZhFaviconIco, map[string]*bintree{}},
			"index.html":                               &bintree{assetsZhIndexHtml, map[string]*bintree{}},
			"main-es2015.1117eea21cfc86471a6c.js":      &bintree{assetsZhMainEs20151117eea21cfc86471a6cJs, map[string]*bintree{}},
			"main-es5.1117eea21cfc86471a6c.js":         &bintree{assetsZhMainEs51117eea21cfc86471a6cJs, map[string]*bintree{}},
			"polyfills-es2015.10a07900b65aecac03a2.js": &bintree{assetsZhPolyfillsEs201510a07900b65aecac03a2Js, map[string]*bintree{}},
			"polyfills-es5.587222d5226b8496b799.js":    &bintree{assetsZhPolyfillsEs5587222d5226b8496b799Js, map[string]*bintree{}},
			"runtime-es2015.09d185272b2306805acd.js":   &bintree{assetsZhRuntimeEs201509d185272b2306805acdJs, map[string]*bintree{}},
			"runtime-es5.09d185272b2306805acd.js":      &bintree{assetsZhRuntimeEs509d185272b2306805acdJs, map[string]*bintree{}},
			"styles.08e54aa5a9ab8359a20a.css":          &bintree{assetsZhStyles08e54aa5a9ab8359a20aCss, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
