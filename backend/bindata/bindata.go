// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.// sources:
// assets/en/MaterialIcons-Regular.eot
// assets/en/MaterialIcons-Regular.ttf
// assets/en/MaterialIcons-Regular.woff
// assets/en/MaterialIcons-Regular.woff2
// assets/en/Roboto-Black.woff
// assets/en/Roboto-Black.woff2
// assets/en/Roboto-BlackItalic.woff
// assets/en/Roboto-BlackItalic.woff2
// assets/en/Roboto-Bold.woff
// assets/en/Roboto-Bold.woff2
// assets/en/Roboto-BoldItalic.woff
// assets/en/Roboto-BoldItalic.woff2
// assets/en/Roboto-Light.woff
// assets/en/Roboto-Light.woff2
// assets/en/Roboto-LightItalic.woff
// assets/en/Roboto-LightItalic.woff2
// assets/en/Roboto-Medium.woff
// assets/en/Roboto-Medium.woff2
// assets/en/Roboto-MediumItalic.woff
// assets/en/Roboto-MediumItalic.woff2
// assets/en/Roboto-Regular.woff
// assets/en/Roboto-Regular.woff2
// assets/en/Roboto-RegularItalic.woff
// assets/en/Roboto-RegularItalic.woff2
// assets/en/Roboto-Thin.woff
// assets/en/Roboto-Thin.woff2
// assets/en/Roboto-ThinItalic.woff
// assets/en/Roboto-ThinItalic.woff2
// assets/en/assets/brand/mlt-logo-en-dark.svg
// assets/en/assets/brand/mlt-logo-en-orig.svg
// assets/en/assets/brand/mlt-logo-en.svg
// assets/en/assets/brand/mlt-logo-ru-dark.svg
// assets/en/assets/brand/mlt-logo-ru-orig.svg
// assets/en/assets/brand/mlt-logo-ru.svg
// assets/en/assets/brand/mlt-logo-zh-dark.svg
// assets/en/assets/brand/mlt-logo-zh-orig.svg
// assets/en/assets/brand/mlt-logo-zh.svg
// assets/en/assets/flags/china_round_48.png
// assets/en/assets/flags/russia_round_48.png
// assets/en/assets/flags/usa_round_48.png
// assets/en/favicon.ico
// assets/en/index.html
// assets/en/main-es2015.js
// assets/en/main-es2015.js.map
// assets/en/main-es5.js
// assets/en/main-es5.js.map
// assets/en/polyfills-es2015.js
// assets/en/polyfills-es2015.js.map
// assets/en/polyfills-es5.js
// assets/en/polyfills-es5.js.map
// assets/en/runtime-es2015.js
// assets/en/runtime-es2015.js.map
// assets/en/runtime-es5.js
// assets/en/runtime-es5.js.map
// assets/en/styles.css
// assets/en/styles.css.map
// assets/en/vendor-es2015.js
// assets/en/vendor-es2015.js.map
// assets/en/vendor-es5.js
// assets/en/vendor-es5.js.map
// assets/gotty/linux_amd64/gotty
// assets/gotty/linux_arm/gotty
// assets/ru/MaterialIcons-Regular.eot
// assets/ru/MaterialIcons-Regular.ttf
// assets/ru/MaterialIcons-Regular.woff
// assets/ru/MaterialIcons-Regular.woff2
// assets/ru/Roboto-Black.woff
// assets/ru/Roboto-Black.woff2
// assets/ru/Roboto-BlackItalic.woff
// assets/ru/Roboto-BlackItalic.woff2
// assets/ru/Roboto-Bold.woff
// assets/ru/Roboto-Bold.woff2
// assets/ru/Roboto-BoldItalic.woff
// assets/ru/Roboto-BoldItalic.woff2
// assets/ru/Roboto-Light.woff
// assets/ru/Roboto-Light.woff2
// assets/ru/Roboto-LightItalic.woff
// assets/ru/Roboto-LightItalic.woff2
// assets/ru/Roboto-Medium.woff
// assets/ru/Roboto-Medium.woff2
// assets/ru/Roboto-MediumItalic.woff
// assets/ru/Roboto-MediumItalic.woff2
// assets/ru/Roboto-Regular.woff
// assets/ru/Roboto-Regular.woff2
// assets/ru/Roboto-RegularItalic.woff
// assets/ru/Roboto-RegularItalic.woff2
// assets/ru/Roboto-Thin.woff
// assets/ru/Roboto-Thin.woff2
// assets/ru/Roboto-ThinItalic.woff
// assets/ru/Roboto-ThinItalic.woff2
// assets/ru/assets/brand/mlt-logo-en-dark.svg
// assets/ru/assets/brand/mlt-logo-en-orig.svg
// assets/ru/assets/brand/mlt-logo-en.svg
// assets/ru/assets/brand/mlt-logo-ru-dark.svg
// assets/ru/assets/brand/mlt-logo-ru-orig.svg
// assets/ru/assets/brand/mlt-logo-ru.svg
// assets/ru/assets/brand/mlt-logo-zh-dark.svg
// assets/ru/assets/brand/mlt-logo-zh-orig.svg
// assets/ru/assets/brand/mlt-logo-zh.svg
// assets/ru/assets/flags/china_round_48.png
// assets/ru/assets/flags/russia_round_48.png
// assets/ru/assets/flags/usa_round_48.png
// assets/ru/favicon.ico
// assets/ru/index.html
// assets/ru/main-es2015.js
// assets/ru/main-es2015.js.map
// assets/ru/main-es5.js
// assets/ru/main-es5.js.map
// assets/ru/polyfills-es2015.js
// assets/ru/polyfills-es2015.js.map
// assets/ru/polyfills-es5.js
// assets/ru/polyfills-es5.js.map
// assets/ru/runtime-es2015.js
// assets/ru/runtime-es2015.js.map
// assets/ru/runtime-es5.js
// assets/ru/runtime-es5.js.map
// assets/ru/styles.css
// assets/ru/styles.css.map
// assets/ru/vendor-es2015.js
// assets/ru/vendor-es2015.js.map
// assets/ru/vendor-es5.js
// assets/ru/vendor-es5.js.map
// assets/zh/MaterialIcons-Regular.eot
// assets/zh/MaterialIcons-Regular.ttf
// assets/zh/MaterialIcons-Regular.woff
// assets/zh/MaterialIcons-Regular.woff2
// assets/zh/Roboto-Black.woff
// assets/zh/Roboto-Black.woff2
// assets/zh/Roboto-BlackItalic.woff
// assets/zh/Roboto-BlackItalic.woff2
// assets/zh/Roboto-Bold.woff
// assets/zh/Roboto-Bold.woff2
// assets/zh/Roboto-BoldItalic.woff
// assets/zh/Roboto-BoldItalic.woff2
// assets/zh/Roboto-Light.woff
// assets/zh/Roboto-Light.woff2
// assets/zh/Roboto-LightItalic.woff
// assets/zh/Roboto-LightItalic.woff2
// assets/zh/Roboto-Medium.woff
// assets/zh/Roboto-Medium.woff2
// assets/zh/Roboto-MediumItalic.woff
// assets/zh/Roboto-MediumItalic.woff2
// assets/zh/Roboto-Regular.woff
// assets/zh/Roboto-Regular.woff2
// assets/zh/Roboto-RegularItalic.woff
// assets/zh/Roboto-RegularItalic.woff2
// assets/zh/Roboto-Thin.woff
// assets/zh/Roboto-Thin.woff2
// assets/zh/Roboto-ThinItalic.woff
// assets/zh/Roboto-ThinItalic.woff2
// assets/zh/assets/brand/mlt-logo-en-dark.svg
// assets/zh/assets/brand/mlt-logo-en-orig.svg
// assets/zh/assets/brand/mlt-logo-en.svg
// assets/zh/assets/brand/mlt-logo-ru-dark.svg
// assets/zh/assets/brand/mlt-logo-ru-orig.svg
// assets/zh/assets/brand/mlt-logo-ru.svg
// assets/zh/assets/brand/mlt-logo-zh-dark.svg
// assets/zh/assets/brand/mlt-logo-zh-orig.svg
// assets/zh/assets/brand/mlt-logo-zh.svg
// assets/zh/assets/flags/china_round_48.png
// assets/zh/assets/flags/russia_round_48.png
// assets/zh/assets/flags/usa_round_48.png
// assets/zh/favicon.ico
// assets/zh/index.html
// assets/zh/main-es2015.js
// assets/zh/main-es2015.js.map
// assets/zh/main-es5.js
// assets/zh/main-es5.js.map
// assets/zh/polyfills-es2015.js
// assets/zh/polyfills-es2015.js.map
// assets/zh/polyfills-es5.js
// assets/zh/polyfills-es5.js.map
// assets/zh/runtime-es2015.js
// assets/zh/runtime-es2015.js.map
// assets/zh/runtime-es5.js
// assets/zh/runtime-es5.js.map
// assets/zh/styles.css
// assets/zh/styles.css.map
// assets/zh/vendor-es2015.js
// assets/zh/vendor-es2015.js.map
// assets/zh/vendor-es5.js
// assets/zh/vendor-es5.js.map
package bindata

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

// assetsEnMaterialiconsRegularEot reads file data from disk. It returns an error on failure.
func assetsEnMaterialiconsRegularEot() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\MaterialIcons-Regular.eot"
	name := "assets/en/MaterialIcons-Regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnMaterialiconsRegularTtf reads file data from disk. It returns an error on failure.
func assetsEnMaterialiconsRegularTtf() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\MaterialIcons-Regular.ttf"
	name := "assets/en/MaterialIcons-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnMaterialiconsRegularWoff reads file data from disk. It returns an error on failure.
func assetsEnMaterialiconsRegularWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\MaterialIcons-Regular.woff"
	name := "assets/en/MaterialIcons-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnMaterialiconsRegularWoff2 reads file data from disk. It returns an error on failure.
func assetsEnMaterialiconsRegularWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\MaterialIcons-Regular.woff2"
	name := "assets/en/MaterialIcons-Regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBlackWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoBlackWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Black.woff"
	name := "assets/en/Roboto-Black.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBlackWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoBlackWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Black.woff2"
	name := "assets/en/Roboto-Black.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBlackitalicWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoBlackitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-BlackItalic.woff"
	name := "assets/en/Roboto-BlackItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBlackitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoBlackitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-BlackItalic.woff2"
	name := "assets/en/Roboto-BlackItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBoldWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoBoldWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Bold.woff"
	name := "assets/en/Roboto-Bold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBoldWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoBoldWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Bold.woff2"
	name := "assets/en/Roboto-Bold.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBolditalicWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoBolditalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-BoldItalic.woff"
	name := "assets/en/Roboto-BoldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoBolditalicWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoBolditalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-BoldItalic.woff2"
	name := "assets/en/Roboto-BoldItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoLightWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoLightWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Light.woff"
	name := "assets/en/Roboto-Light.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoLightWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoLightWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Light.woff2"
	name := "assets/en/Roboto-Light.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoLightitalicWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoLightitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-LightItalic.woff"
	name := "assets/en/Roboto-LightItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoLightitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoLightitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-LightItalic.woff2"
	name := "assets/en/Roboto-LightItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoMediumWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoMediumWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Medium.woff"
	name := "assets/en/Roboto-Medium.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoMediumWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoMediumWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Medium.woff2"
	name := "assets/en/Roboto-Medium.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoMediumitalicWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoMediumitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-MediumItalic.woff"
	name := "assets/en/Roboto-MediumItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoMediumitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoMediumitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-MediumItalic.woff2"
	name := "assets/en/Roboto-MediumItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoRegularWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoRegularWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Regular.woff"
	name := "assets/en/Roboto-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoRegularWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoRegularWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Regular.woff2"
	name := "assets/en/Roboto-Regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoRegularitalicWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoRegularitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-RegularItalic.woff"
	name := "assets/en/Roboto-RegularItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoRegularitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoRegularitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-RegularItalic.woff2"
	name := "assets/en/Roboto-RegularItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoThinWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoThinWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Thin.woff"
	name := "assets/en/Roboto-Thin.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoThinWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoThinWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-Thin.woff2"
	name := "assets/en/Roboto-Thin.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoThinitalicWoff reads file data from disk. It returns an error on failure.
func assetsEnRobotoThinitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-ThinItalic.woff"
	name := "assets/en/Roboto-ThinItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRobotoThinitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsEnRobotoThinitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\Roboto-ThinItalic.woff2"
	name := "assets/en/Roboto-ThinItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoEnDarkSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoEnDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-en-dark.svg"
	name := "assets/en/assets/brand/mlt-logo-en-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoEnOrigSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoEnOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-en-orig.svg"
	name := "assets/en/assets/brand/mlt-logo-en-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoEnSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoEnSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-en.svg"
	name := "assets/en/assets/brand/mlt-logo-en.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoRuDarkSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoRuDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-ru-dark.svg"
	name := "assets/en/assets/brand/mlt-logo-ru-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoRuOrigSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoRuOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-ru-orig.svg"
	name := "assets/en/assets/brand/mlt-logo-ru-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoRuSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoRuSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-ru.svg"
	name := "assets/en/assets/brand/mlt-logo-ru.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoZhDarkSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoZhDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-zh-dark.svg"
	name := "assets/en/assets/brand/mlt-logo-zh-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoZhOrigSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoZhOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-zh-orig.svg"
	name := "assets/en/assets/brand/mlt-logo-zh-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsBrandMltLogoZhSvg reads file data from disk. It returns an error on failure.
func assetsEnAssetsBrandMltLogoZhSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\brand\\mlt-logo-zh.svg"
	name := "assets/en/assets/brand/mlt-logo-zh.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsFlagsChina_round_48Png reads file data from disk. It returns an error on failure.
func assetsEnAssetsFlagsChina_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\flags\\china_round_48.png"
	name := "assets/en/assets/flags/china_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsFlagsRussia_round_48Png reads file data from disk. It returns an error on failure.
func assetsEnAssetsFlagsRussia_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\flags\\russia_round_48.png"
	name := "assets/en/assets/flags/russia_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnAssetsFlagsUsa_round_48Png reads file data from disk. It returns an error on failure.
func assetsEnAssetsFlagsUsa_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\assets\\flags\\usa_round_48.png"
	name := "assets/en/assets/flags/usa_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnFaviconIco reads file data from disk. It returns an error on failure.
func assetsEnFaviconIco() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\favicon.ico"
	name := "assets/en/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnIndexHtml reads file data from disk. It returns an error on failure.
func assetsEnIndexHtml() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\index.html"
	name := "assets/en/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnMainEs2015Js reads file data from disk. It returns an error on failure.
func assetsEnMainEs2015Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\main-es2015.js"
	name := "assets/en/main-es2015.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnMainEs2015JsMap reads file data from disk. It returns an error on failure.
func assetsEnMainEs2015JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\main-es2015.js.map"
	name := "assets/en/main-es2015.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnMainEs5Js reads file data from disk. It returns an error on failure.
func assetsEnMainEs5Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\main-es5.js"
	name := "assets/en/main-es5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnMainEs5JsMap reads file data from disk. It returns an error on failure.
func assetsEnMainEs5JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\main-es5.js.map"
	name := "assets/en/main-es5.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnPolyfillsEs2015Js reads file data from disk. It returns an error on failure.
func assetsEnPolyfillsEs2015Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\polyfills-es2015.js"
	name := "assets/en/polyfills-es2015.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnPolyfillsEs2015JsMap reads file data from disk. It returns an error on failure.
func assetsEnPolyfillsEs2015JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\polyfills-es2015.js.map"
	name := "assets/en/polyfills-es2015.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnPolyfillsEs5Js reads file data from disk. It returns an error on failure.
func assetsEnPolyfillsEs5Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\polyfills-es5.js"
	name := "assets/en/polyfills-es5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnPolyfillsEs5JsMap reads file data from disk. It returns an error on failure.
func assetsEnPolyfillsEs5JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\polyfills-es5.js.map"
	name := "assets/en/polyfills-es5.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRuntimeEs2015Js reads file data from disk. It returns an error on failure.
func assetsEnRuntimeEs2015Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\runtime-es2015.js"
	name := "assets/en/runtime-es2015.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRuntimeEs2015JsMap reads file data from disk. It returns an error on failure.
func assetsEnRuntimeEs2015JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\runtime-es2015.js.map"
	name := "assets/en/runtime-es2015.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRuntimeEs5Js reads file data from disk. It returns an error on failure.
func assetsEnRuntimeEs5Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\runtime-es5.js"
	name := "assets/en/runtime-es5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnRuntimeEs5JsMap reads file data from disk. It returns an error on failure.
func assetsEnRuntimeEs5JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\runtime-es5.js.map"
	name := "assets/en/runtime-es5.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnStylesCss reads file data from disk. It returns an error on failure.
func assetsEnStylesCss() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\styles.css"
	name := "assets/en/styles.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnStylesCssMap reads file data from disk. It returns an error on failure.
func assetsEnStylesCssMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\styles.css.map"
	name := "assets/en/styles.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnVendorEs2015Js reads file data from disk. It returns an error on failure.
func assetsEnVendorEs2015Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\vendor-es2015.js"
	name := "assets/en/vendor-es2015.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnVendorEs2015JsMap reads file data from disk. It returns an error on failure.
func assetsEnVendorEs2015JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\vendor-es2015.js.map"
	name := "assets/en/vendor-es2015.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnVendorEs5Js reads file data from disk. It returns an error on failure.
func assetsEnVendorEs5Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\vendor-es5.js"
	name := "assets/en/vendor-es5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsEnVendorEs5JsMap reads file data from disk. It returns an error on failure.
func assetsEnVendorEs5JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\en\\vendor-es5.js.map"
	name := "assets/en/vendor-es5.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsGottyLinux_amd64Gotty reads file data from disk. It returns an error on failure.
func assetsGottyLinux_amd64Gotty() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\gotty\\linux_amd64\\gotty"
	name := "assets/gotty/linux_amd64/gotty"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsGottyLinux_armGotty reads file data from disk. It returns an error on failure.
func assetsGottyLinux_armGotty() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\gotty\\linux_arm\\gotty"
	name := "assets/gotty/linux_arm/gotty"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMaterialiconsRegularEot reads file data from disk. It returns an error on failure.
func assetsRuMaterialiconsRegularEot() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\MaterialIcons-Regular.eot"
	name := "assets/ru/MaterialIcons-Regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMaterialiconsRegularTtf reads file data from disk. It returns an error on failure.
func assetsRuMaterialiconsRegularTtf() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\MaterialIcons-Regular.ttf"
	name := "assets/ru/MaterialIcons-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMaterialiconsRegularWoff reads file data from disk. It returns an error on failure.
func assetsRuMaterialiconsRegularWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\MaterialIcons-Regular.woff"
	name := "assets/ru/MaterialIcons-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMaterialiconsRegularWoff2 reads file data from disk. It returns an error on failure.
func assetsRuMaterialiconsRegularWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\MaterialIcons-Regular.woff2"
	name := "assets/ru/MaterialIcons-Regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBlackWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoBlackWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Black.woff"
	name := "assets/ru/Roboto-Black.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBlackWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoBlackWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Black.woff2"
	name := "assets/ru/Roboto-Black.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBlackitalicWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoBlackitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-BlackItalic.woff"
	name := "assets/ru/Roboto-BlackItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBlackitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoBlackitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-BlackItalic.woff2"
	name := "assets/ru/Roboto-BlackItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBoldWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoBoldWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Bold.woff"
	name := "assets/ru/Roboto-Bold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBoldWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoBoldWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Bold.woff2"
	name := "assets/ru/Roboto-Bold.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBolditalicWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoBolditalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-BoldItalic.woff"
	name := "assets/ru/Roboto-BoldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoBolditalicWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoBolditalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-BoldItalic.woff2"
	name := "assets/ru/Roboto-BoldItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoLightWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoLightWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Light.woff"
	name := "assets/ru/Roboto-Light.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoLightWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoLightWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Light.woff2"
	name := "assets/ru/Roboto-Light.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoLightitalicWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoLightitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-LightItalic.woff"
	name := "assets/ru/Roboto-LightItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoLightitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoLightitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-LightItalic.woff2"
	name := "assets/ru/Roboto-LightItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoMediumWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoMediumWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Medium.woff"
	name := "assets/ru/Roboto-Medium.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoMediumWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoMediumWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Medium.woff2"
	name := "assets/ru/Roboto-Medium.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoMediumitalicWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoMediumitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-MediumItalic.woff"
	name := "assets/ru/Roboto-MediumItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoMediumitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoMediumitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-MediumItalic.woff2"
	name := "assets/ru/Roboto-MediumItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoRegularWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoRegularWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Regular.woff"
	name := "assets/ru/Roboto-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoRegularWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoRegularWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Regular.woff2"
	name := "assets/ru/Roboto-Regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoRegularitalicWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoRegularitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-RegularItalic.woff"
	name := "assets/ru/Roboto-RegularItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoRegularitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoRegularitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-RegularItalic.woff2"
	name := "assets/ru/Roboto-RegularItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoThinWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoThinWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Thin.woff"
	name := "assets/ru/Roboto-Thin.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoThinWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoThinWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-Thin.woff2"
	name := "assets/ru/Roboto-Thin.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoThinitalicWoff reads file data from disk. It returns an error on failure.
func assetsRuRobotoThinitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-ThinItalic.woff"
	name := "assets/ru/Roboto-ThinItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRobotoThinitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsRuRobotoThinitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\Roboto-ThinItalic.woff2"
	name := "assets/ru/Roboto-ThinItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoEnDarkSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoEnDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-en-dark.svg"
	name := "assets/ru/assets/brand/mlt-logo-en-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoEnOrigSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoEnOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-en-orig.svg"
	name := "assets/ru/assets/brand/mlt-logo-en-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoEnSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoEnSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-en.svg"
	name := "assets/ru/assets/brand/mlt-logo-en.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoRuDarkSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoRuDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-ru-dark.svg"
	name := "assets/ru/assets/brand/mlt-logo-ru-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoRuOrigSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoRuOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-ru-orig.svg"
	name := "assets/ru/assets/brand/mlt-logo-ru-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoRuSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoRuSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-ru.svg"
	name := "assets/ru/assets/brand/mlt-logo-ru.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoZhDarkSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoZhDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-zh-dark.svg"
	name := "assets/ru/assets/brand/mlt-logo-zh-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoZhOrigSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoZhOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-zh-orig.svg"
	name := "assets/ru/assets/brand/mlt-logo-zh-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsBrandMltLogoZhSvg reads file data from disk. It returns an error on failure.
func assetsRuAssetsBrandMltLogoZhSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\brand\\mlt-logo-zh.svg"
	name := "assets/ru/assets/brand/mlt-logo-zh.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsFlagsChina_round_48Png reads file data from disk. It returns an error on failure.
func assetsRuAssetsFlagsChina_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\flags\\china_round_48.png"
	name := "assets/ru/assets/flags/china_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsFlagsRussia_round_48Png reads file data from disk. It returns an error on failure.
func assetsRuAssetsFlagsRussia_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\flags\\russia_round_48.png"
	name := "assets/ru/assets/flags/russia_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuAssetsFlagsUsa_round_48Png reads file data from disk. It returns an error on failure.
func assetsRuAssetsFlagsUsa_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\assets\\flags\\usa_round_48.png"
	name := "assets/ru/assets/flags/usa_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuFaviconIco reads file data from disk. It returns an error on failure.
func assetsRuFaviconIco() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\favicon.ico"
	name := "assets/ru/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuIndexHtml reads file data from disk. It returns an error on failure.
func assetsRuIndexHtml() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\index.html"
	name := "assets/ru/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMainEs2015Js reads file data from disk. It returns an error on failure.
func assetsRuMainEs2015Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\main-es2015.js"
	name := "assets/ru/main-es2015.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMainEs2015JsMap reads file data from disk. It returns an error on failure.
func assetsRuMainEs2015JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\main-es2015.js.map"
	name := "assets/ru/main-es2015.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMainEs5Js reads file data from disk. It returns an error on failure.
func assetsRuMainEs5Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\main-es5.js"
	name := "assets/ru/main-es5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuMainEs5JsMap reads file data from disk. It returns an error on failure.
func assetsRuMainEs5JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\main-es5.js.map"
	name := "assets/ru/main-es5.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuPolyfillsEs2015Js reads file data from disk. It returns an error on failure.
func assetsRuPolyfillsEs2015Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\polyfills-es2015.js"
	name := "assets/ru/polyfills-es2015.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuPolyfillsEs2015JsMap reads file data from disk. It returns an error on failure.
func assetsRuPolyfillsEs2015JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\polyfills-es2015.js.map"
	name := "assets/ru/polyfills-es2015.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuPolyfillsEs5Js reads file data from disk. It returns an error on failure.
func assetsRuPolyfillsEs5Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\polyfills-es5.js"
	name := "assets/ru/polyfills-es5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuPolyfillsEs5JsMap reads file data from disk. It returns an error on failure.
func assetsRuPolyfillsEs5JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\polyfills-es5.js.map"
	name := "assets/ru/polyfills-es5.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRuntimeEs2015Js reads file data from disk. It returns an error on failure.
func assetsRuRuntimeEs2015Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\runtime-es2015.js"
	name := "assets/ru/runtime-es2015.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRuntimeEs2015JsMap reads file data from disk. It returns an error on failure.
func assetsRuRuntimeEs2015JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\runtime-es2015.js.map"
	name := "assets/ru/runtime-es2015.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRuntimeEs5Js reads file data from disk. It returns an error on failure.
func assetsRuRuntimeEs5Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\runtime-es5.js"
	name := "assets/ru/runtime-es5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuRuntimeEs5JsMap reads file data from disk. It returns an error on failure.
func assetsRuRuntimeEs5JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\runtime-es5.js.map"
	name := "assets/ru/runtime-es5.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuStylesCss reads file data from disk. It returns an error on failure.
func assetsRuStylesCss() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\styles.css"
	name := "assets/ru/styles.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuStylesCssMap reads file data from disk. It returns an error on failure.
func assetsRuStylesCssMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\styles.css.map"
	name := "assets/ru/styles.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuVendorEs2015Js reads file data from disk. It returns an error on failure.
func assetsRuVendorEs2015Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\vendor-es2015.js"
	name := "assets/ru/vendor-es2015.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuVendorEs2015JsMap reads file data from disk. It returns an error on failure.
func assetsRuVendorEs2015JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\vendor-es2015.js.map"
	name := "assets/ru/vendor-es2015.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuVendorEs5Js reads file data from disk. It returns an error on failure.
func assetsRuVendorEs5Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\vendor-es5.js"
	name := "assets/ru/vendor-es5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsRuVendorEs5JsMap reads file data from disk. It returns an error on failure.
func assetsRuVendorEs5JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\ru\\vendor-es5.js.map"
	name := "assets/ru/vendor-es5.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMaterialiconsRegularEot reads file data from disk. It returns an error on failure.
func assetsZhMaterialiconsRegularEot() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\MaterialIcons-Regular.eot"
	name := "assets/zh/MaterialIcons-Regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMaterialiconsRegularTtf reads file data from disk. It returns an error on failure.
func assetsZhMaterialiconsRegularTtf() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\MaterialIcons-Regular.ttf"
	name := "assets/zh/MaterialIcons-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMaterialiconsRegularWoff reads file data from disk. It returns an error on failure.
func assetsZhMaterialiconsRegularWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\MaterialIcons-Regular.woff"
	name := "assets/zh/MaterialIcons-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMaterialiconsRegularWoff2 reads file data from disk. It returns an error on failure.
func assetsZhMaterialiconsRegularWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\MaterialIcons-Regular.woff2"
	name := "assets/zh/MaterialIcons-Regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBlackWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoBlackWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Black.woff"
	name := "assets/zh/Roboto-Black.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBlackWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoBlackWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Black.woff2"
	name := "assets/zh/Roboto-Black.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBlackitalicWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoBlackitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-BlackItalic.woff"
	name := "assets/zh/Roboto-BlackItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBlackitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoBlackitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-BlackItalic.woff2"
	name := "assets/zh/Roboto-BlackItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBoldWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoBoldWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Bold.woff"
	name := "assets/zh/Roboto-Bold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBoldWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoBoldWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Bold.woff2"
	name := "assets/zh/Roboto-Bold.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBolditalicWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoBolditalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-BoldItalic.woff"
	name := "assets/zh/Roboto-BoldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoBolditalicWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoBolditalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-BoldItalic.woff2"
	name := "assets/zh/Roboto-BoldItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoLightWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoLightWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Light.woff"
	name := "assets/zh/Roboto-Light.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoLightWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoLightWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Light.woff2"
	name := "assets/zh/Roboto-Light.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoLightitalicWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoLightitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-LightItalic.woff"
	name := "assets/zh/Roboto-LightItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoLightitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoLightitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-LightItalic.woff2"
	name := "assets/zh/Roboto-LightItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoMediumWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoMediumWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Medium.woff"
	name := "assets/zh/Roboto-Medium.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoMediumWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoMediumWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Medium.woff2"
	name := "assets/zh/Roboto-Medium.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoMediumitalicWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoMediumitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-MediumItalic.woff"
	name := "assets/zh/Roboto-MediumItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoMediumitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoMediumitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-MediumItalic.woff2"
	name := "assets/zh/Roboto-MediumItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoRegularWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoRegularWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Regular.woff"
	name := "assets/zh/Roboto-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoRegularWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoRegularWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Regular.woff2"
	name := "assets/zh/Roboto-Regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoRegularitalicWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoRegularitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-RegularItalic.woff"
	name := "assets/zh/Roboto-RegularItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoRegularitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoRegularitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-RegularItalic.woff2"
	name := "assets/zh/Roboto-RegularItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoThinWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoThinWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Thin.woff"
	name := "assets/zh/Roboto-Thin.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoThinWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoThinWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-Thin.woff2"
	name := "assets/zh/Roboto-Thin.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoThinitalicWoff reads file data from disk. It returns an error on failure.
func assetsZhRobotoThinitalicWoff() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-ThinItalic.woff"
	name := "assets/zh/Roboto-ThinItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRobotoThinitalicWoff2 reads file data from disk. It returns an error on failure.
func assetsZhRobotoThinitalicWoff2() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\Roboto-ThinItalic.woff2"
	name := "assets/zh/Roboto-ThinItalic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoEnDarkSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoEnDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-en-dark.svg"
	name := "assets/zh/assets/brand/mlt-logo-en-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoEnOrigSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoEnOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-en-orig.svg"
	name := "assets/zh/assets/brand/mlt-logo-en-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoEnSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoEnSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-en.svg"
	name := "assets/zh/assets/brand/mlt-logo-en.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoRuDarkSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoRuDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-ru-dark.svg"
	name := "assets/zh/assets/brand/mlt-logo-ru-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoRuOrigSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoRuOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-ru-orig.svg"
	name := "assets/zh/assets/brand/mlt-logo-ru-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoRuSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoRuSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-ru.svg"
	name := "assets/zh/assets/brand/mlt-logo-ru.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoZhDarkSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoZhDarkSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-zh-dark.svg"
	name := "assets/zh/assets/brand/mlt-logo-zh-dark.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoZhOrigSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoZhOrigSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-zh-orig.svg"
	name := "assets/zh/assets/brand/mlt-logo-zh-orig.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsBrandMltLogoZhSvg reads file data from disk. It returns an error on failure.
func assetsZhAssetsBrandMltLogoZhSvg() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\brand\\mlt-logo-zh.svg"
	name := "assets/zh/assets/brand/mlt-logo-zh.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsFlagsChina_round_48Png reads file data from disk. It returns an error on failure.
func assetsZhAssetsFlagsChina_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\flags\\china_round_48.png"
	name := "assets/zh/assets/flags/china_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsFlagsRussia_round_48Png reads file data from disk. It returns an error on failure.
func assetsZhAssetsFlagsRussia_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\flags\\russia_round_48.png"
	name := "assets/zh/assets/flags/russia_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhAssetsFlagsUsa_round_48Png reads file data from disk. It returns an error on failure.
func assetsZhAssetsFlagsUsa_round_48Png() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\assets\\flags\\usa_round_48.png"
	name := "assets/zh/assets/flags/usa_round_48.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhFaviconIco reads file data from disk. It returns an error on failure.
func assetsZhFaviconIco() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\favicon.ico"
	name := "assets/zh/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhIndexHtml reads file data from disk. It returns an error on failure.
func assetsZhIndexHtml() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\index.html"
	name := "assets/zh/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMainEs2015Js reads file data from disk. It returns an error on failure.
func assetsZhMainEs2015Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\main-es2015.js"
	name := "assets/zh/main-es2015.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMainEs2015JsMap reads file data from disk. It returns an error on failure.
func assetsZhMainEs2015JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\main-es2015.js.map"
	name := "assets/zh/main-es2015.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMainEs5Js reads file data from disk. It returns an error on failure.
func assetsZhMainEs5Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\main-es5.js"
	name := "assets/zh/main-es5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhMainEs5JsMap reads file data from disk. It returns an error on failure.
func assetsZhMainEs5JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\main-es5.js.map"
	name := "assets/zh/main-es5.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhPolyfillsEs2015Js reads file data from disk. It returns an error on failure.
func assetsZhPolyfillsEs2015Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\polyfills-es2015.js"
	name := "assets/zh/polyfills-es2015.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhPolyfillsEs2015JsMap reads file data from disk. It returns an error on failure.
func assetsZhPolyfillsEs2015JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\polyfills-es2015.js.map"
	name := "assets/zh/polyfills-es2015.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhPolyfillsEs5Js reads file data from disk. It returns an error on failure.
func assetsZhPolyfillsEs5Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\polyfills-es5.js"
	name := "assets/zh/polyfills-es5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhPolyfillsEs5JsMap reads file data from disk. It returns an error on failure.
func assetsZhPolyfillsEs5JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\polyfills-es5.js.map"
	name := "assets/zh/polyfills-es5.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRuntimeEs2015Js reads file data from disk. It returns an error on failure.
func assetsZhRuntimeEs2015Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\runtime-es2015.js"
	name := "assets/zh/runtime-es2015.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRuntimeEs2015JsMap reads file data from disk. It returns an error on failure.
func assetsZhRuntimeEs2015JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\runtime-es2015.js.map"
	name := "assets/zh/runtime-es2015.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRuntimeEs5Js reads file data from disk. It returns an error on failure.
func assetsZhRuntimeEs5Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\runtime-es5.js"
	name := "assets/zh/runtime-es5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhRuntimeEs5JsMap reads file data from disk. It returns an error on failure.
func assetsZhRuntimeEs5JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\runtime-es5.js.map"
	name := "assets/zh/runtime-es5.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhStylesCss reads file data from disk. It returns an error on failure.
func assetsZhStylesCss() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\styles.css"
	name := "assets/zh/styles.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhStylesCssMap reads file data from disk. It returns an error on failure.
func assetsZhStylesCssMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\styles.css.map"
	name := "assets/zh/styles.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhVendorEs2015Js reads file data from disk. It returns an error on failure.
func assetsZhVendorEs2015Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\vendor-es2015.js"
	name := "assets/zh/vendor-es2015.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhVendorEs2015JsMap reads file data from disk. It returns an error on failure.
func assetsZhVendorEs2015JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\vendor-es2015.js.map"
	name := "assets/zh/vendor-es2015.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhVendorEs5Js reads file data from disk. It returns an error on failure.
func assetsZhVendorEs5Js() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\vendor-es5.js"
	name := "assets/zh/vendor-es5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsZhVendorEs5JsMap reads file data from disk. It returns an error on failure.
func assetsZhVendorEs5JsMap() (*asset, error) {
	path := "D:\\Scrypts\\Scrypts\\go\\src\\github.com\\kirsrus\\testDemoApp\\backend\\assets\\zh\\vendor-es5.js.map"
	name := "assets/zh/vendor-es5.js.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/en/MaterialIcons-Regular.eot":         assetsEnMaterialiconsRegularEot,
	"assets/en/MaterialIcons-Regular.ttf":         assetsEnMaterialiconsRegularTtf,
	"assets/en/MaterialIcons-Regular.woff":        assetsEnMaterialiconsRegularWoff,
	"assets/en/MaterialIcons-Regular.woff2":       assetsEnMaterialiconsRegularWoff2,
	"assets/en/Roboto-Black.woff":                 assetsEnRobotoBlackWoff,
	"assets/en/Roboto-Black.woff2":                assetsEnRobotoBlackWoff2,
	"assets/en/Roboto-BlackItalic.woff":           assetsEnRobotoBlackitalicWoff,
	"assets/en/Roboto-BlackItalic.woff2":          assetsEnRobotoBlackitalicWoff2,
	"assets/en/Roboto-Bold.woff":                  assetsEnRobotoBoldWoff,
	"assets/en/Roboto-Bold.woff2":                 assetsEnRobotoBoldWoff2,
	"assets/en/Roboto-BoldItalic.woff":            assetsEnRobotoBolditalicWoff,
	"assets/en/Roboto-BoldItalic.woff2":           assetsEnRobotoBolditalicWoff2,
	"assets/en/Roboto-Light.woff":                 assetsEnRobotoLightWoff,
	"assets/en/Roboto-Light.woff2":                assetsEnRobotoLightWoff2,
	"assets/en/Roboto-LightItalic.woff":           assetsEnRobotoLightitalicWoff,
	"assets/en/Roboto-LightItalic.woff2":          assetsEnRobotoLightitalicWoff2,
	"assets/en/Roboto-Medium.woff":                assetsEnRobotoMediumWoff,
	"assets/en/Roboto-Medium.woff2":               assetsEnRobotoMediumWoff2,
	"assets/en/Roboto-MediumItalic.woff":          assetsEnRobotoMediumitalicWoff,
	"assets/en/Roboto-MediumItalic.woff2":         assetsEnRobotoMediumitalicWoff2,
	"assets/en/Roboto-Regular.woff":               assetsEnRobotoRegularWoff,
	"assets/en/Roboto-Regular.woff2":              assetsEnRobotoRegularWoff2,
	"assets/en/Roboto-RegularItalic.woff":         assetsEnRobotoRegularitalicWoff,
	"assets/en/Roboto-RegularItalic.woff2":        assetsEnRobotoRegularitalicWoff2,
	"assets/en/Roboto-Thin.woff":                  assetsEnRobotoThinWoff,
	"assets/en/Roboto-Thin.woff2":                 assetsEnRobotoThinWoff2,
	"assets/en/Roboto-ThinItalic.woff":            assetsEnRobotoThinitalicWoff,
	"assets/en/Roboto-ThinItalic.woff2":           assetsEnRobotoThinitalicWoff2,
	"assets/en/assets/brand/mlt-logo-en-dark.svg": assetsEnAssetsBrandMltLogoEnDarkSvg,
	"assets/en/assets/brand/mlt-logo-en-orig.svg": assetsEnAssetsBrandMltLogoEnOrigSvg,
	"assets/en/assets/brand/mlt-logo-en.svg":      assetsEnAssetsBrandMltLogoEnSvg,
	"assets/en/assets/brand/mlt-logo-ru-dark.svg": assetsEnAssetsBrandMltLogoRuDarkSvg,
	"assets/en/assets/brand/mlt-logo-ru-orig.svg": assetsEnAssetsBrandMltLogoRuOrigSvg,
	"assets/en/assets/brand/mlt-logo-ru.svg":      assetsEnAssetsBrandMltLogoRuSvg,
	"assets/en/assets/brand/mlt-logo-zh-dark.svg": assetsEnAssetsBrandMltLogoZhDarkSvg,
	"assets/en/assets/brand/mlt-logo-zh-orig.svg": assetsEnAssetsBrandMltLogoZhOrigSvg,
	"assets/en/assets/brand/mlt-logo-zh.svg":      assetsEnAssetsBrandMltLogoZhSvg,
	"assets/en/assets/flags/china_round_48.png":   assetsEnAssetsFlagsChina_round_48Png,
	"assets/en/assets/flags/russia_round_48.png":  assetsEnAssetsFlagsRussia_round_48Png,
	"assets/en/assets/flags/usa_round_48.png":     assetsEnAssetsFlagsUsa_round_48Png,
	"assets/en/favicon.ico":                       assetsEnFaviconIco,
	"assets/en/index.html":                        assetsEnIndexHtml,
	"assets/en/main-es2015.js":                    assetsEnMainEs2015Js,
	"assets/en/main-es2015.js.map":                assetsEnMainEs2015JsMap,
	"assets/en/main-es5.js":                       assetsEnMainEs5Js,
	"assets/en/main-es5.js.map":                   assetsEnMainEs5JsMap,
	"assets/en/polyfills-es2015.js":               assetsEnPolyfillsEs2015Js,
	"assets/en/polyfills-es2015.js.map":           assetsEnPolyfillsEs2015JsMap,
	"assets/en/polyfills-es5.js":                  assetsEnPolyfillsEs5Js,
	"assets/en/polyfills-es5.js.map":              assetsEnPolyfillsEs5JsMap,
	"assets/en/runtime-es2015.js":                 assetsEnRuntimeEs2015Js,
	"assets/en/runtime-es2015.js.map":             assetsEnRuntimeEs2015JsMap,
	"assets/en/runtime-es5.js":                    assetsEnRuntimeEs5Js,
	"assets/en/runtime-es5.js.map":                assetsEnRuntimeEs5JsMap,
	"assets/en/styles.css":                        assetsEnStylesCss,
	"assets/en/styles.css.map":                    assetsEnStylesCssMap,
	"assets/en/vendor-es2015.js":                  assetsEnVendorEs2015Js,
	"assets/en/vendor-es2015.js.map":              assetsEnVendorEs2015JsMap,
	"assets/en/vendor-es5.js":                     assetsEnVendorEs5Js,
	"assets/en/vendor-es5.js.map":                 assetsEnVendorEs5JsMap,
	"assets/gotty/linux_amd64/gotty":              assetsGottyLinux_amd64Gotty,
	"assets/gotty/linux_arm/gotty":                assetsGottyLinux_armGotty,
	"assets/ru/MaterialIcons-Regular.eot":         assetsRuMaterialiconsRegularEot,
	"assets/ru/MaterialIcons-Regular.ttf":         assetsRuMaterialiconsRegularTtf,
	"assets/ru/MaterialIcons-Regular.woff":        assetsRuMaterialiconsRegularWoff,
	"assets/ru/MaterialIcons-Regular.woff2":       assetsRuMaterialiconsRegularWoff2,
	"assets/ru/Roboto-Black.woff":                 assetsRuRobotoBlackWoff,
	"assets/ru/Roboto-Black.woff2":                assetsRuRobotoBlackWoff2,
	"assets/ru/Roboto-BlackItalic.woff":           assetsRuRobotoBlackitalicWoff,
	"assets/ru/Roboto-BlackItalic.woff2":          assetsRuRobotoBlackitalicWoff2,
	"assets/ru/Roboto-Bold.woff":                  assetsRuRobotoBoldWoff,
	"assets/ru/Roboto-Bold.woff2":                 assetsRuRobotoBoldWoff2,
	"assets/ru/Roboto-BoldItalic.woff":            assetsRuRobotoBolditalicWoff,
	"assets/ru/Roboto-BoldItalic.woff2":           assetsRuRobotoBolditalicWoff2,
	"assets/ru/Roboto-Light.woff":                 assetsRuRobotoLightWoff,
	"assets/ru/Roboto-Light.woff2":                assetsRuRobotoLightWoff2,
	"assets/ru/Roboto-LightItalic.woff":           assetsRuRobotoLightitalicWoff,
	"assets/ru/Roboto-LightItalic.woff2":          assetsRuRobotoLightitalicWoff2,
	"assets/ru/Roboto-Medium.woff":                assetsRuRobotoMediumWoff,
	"assets/ru/Roboto-Medium.woff2":               assetsRuRobotoMediumWoff2,
	"assets/ru/Roboto-MediumItalic.woff":          assetsRuRobotoMediumitalicWoff,
	"assets/ru/Roboto-MediumItalic.woff2":         assetsRuRobotoMediumitalicWoff2,
	"assets/ru/Roboto-Regular.woff":               assetsRuRobotoRegularWoff,
	"assets/ru/Roboto-Regular.woff2":              assetsRuRobotoRegularWoff2,
	"assets/ru/Roboto-RegularItalic.woff":         assetsRuRobotoRegularitalicWoff,
	"assets/ru/Roboto-RegularItalic.woff2":        assetsRuRobotoRegularitalicWoff2,
	"assets/ru/Roboto-Thin.woff":                  assetsRuRobotoThinWoff,
	"assets/ru/Roboto-Thin.woff2":                 assetsRuRobotoThinWoff2,
	"assets/ru/Roboto-ThinItalic.woff":            assetsRuRobotoThinitalicWoff,
	"assets/ru/Roboto-ThinItalic.woff2":           assetsRuRobotoThinitalicWoff2,
	"assets/ru/assets/brand/mlt-logo-en-dark.svg": assetsRuAssetsBrandMltLogoEnDarkSvg,
	"assets/ru/assets/brand/mlt-logo-en-orig.svg": assetsRuAssetsBrandMltLogoEnOrigSvg,
	"assets/ru/assets/brand/mlt-logo-en.svg":      assetsRuAssetsBrandMltLogoEnSvg,
	"assets/ru/assets/brand/mlt-logo-ru-dark.svg": assetsRuAssetsBrandMltLogoRuDarkSvg,
	"assets/ru/assets/brand/mlt-logo-ru-orig.svg": assetsRuAssetsBrandMltLogoRuOrigSvg,
	"assets/ru/assets/brand/mlt-logo-ru.svg":      assetsRuAssetsBrandMltLogoRuSvg,
	"assets/ru/assets/brand/mlt-logo-zh-dark.svg": assetsRuAssetsBrandMltLogoZhDarkSvg,
	"assets/ru/assets/brand/mlt-logo-zh-orig.svg": assetsRuAssetsBrandMltLogoZhOrigSvg,
	"assets/ru/assets/brand/mlt-logo-zh.svg":      assetsRuAssetsBrandMltLogoZhSvg,
	"assets/ru/assets/flags/china_round_48.png":   assetsRuAssetsFlagsChina_round_48Png,
	"assets/ru/assets/flags/russia_round_48.png":  assetsRuAssetsFlagsRussia_round_48Png,
	"assets/ru/assets/flags/usa_round_48.png":     assetsRuAssetsFlagsUsa_round_48Png,
	"assets/ru/favicon.ico":                       assetsRuFaviconIco,
	"assets/ru/index.html":                        assetsRuIndexHtml,
	"assets/ru/main-es2015.js":                    assetsRuMainEs2015Js,
	"assets/ru/main-es2015.js.map":                assetsRuMainEs2015JsMap,
	"assets/ru/main-es5.js":                       assetsRuMainEs5Js,
	"assets/ru/main-es5.js.map":                   assetsRuMainEs5JsMap,
	"assets/ru/polyfills-es2015.js":               assetsRuPolyfillsEs2015Js,
	"assets/ru/polyfills-es2015.js.map":           assetsRuPolyfillsEs2015JsMap,
	"assets/ru/polyfills-es5.js":                  assetsRuPolyfillsEs5Js,
	"assets/ru/polyfills-es5.js.map":              assetsRuPolyfillsEs5JsMap,
	"assets/ru/runtime-es2015.js":                 assetsRuRuntimeEs2015Js,
	"assets/ru/runtime-es2015.js.map":             assetsRuRuntimeEs2015JsMap,
	"assets/ru/runtime-es5.js":                    assetsRuRuntimeEs5Js,
	"assets/ru/runtime-es5.js.map":                assetsRuRuntimeEs5JsMap,
	"assets/ru/styles.css":                        assetsRuStylesCss,
	"assets/ru/styles.css.map":                    assetsRuStylesCssMap,
	"assets/ru/vendor-es2015.js":                  assetsRuVendorEs2015Js,
	"assets/ru/vendor-es2015.js.map":              assetsRuVendorEs2015JsMap,
	"assets/ru/vendor-es5.js":                     assetsRuVendorEs5Js,
	"assets/ru/vendor-es5.js.map":                 assetsRuVendorEs5JsMap,
	"assets/zh/MaterialIcons-Regular.eot":         assetsZhMaterialiconsRegularEot,
	"assets/zh/MaterialIcons-Regular.ttf":         assetsZhMaterialiconsRegularTtf,
	"assets/zh/MaterialIcons-Regular.woff":        assetsZhMaterialiconsRegularWoff,
	"assets/zh/MaterialIcons-Regular.woff2":       assetsZhMaterialiconsRegularWoff2,
	"assets/zh/Roboto-Black.woff":                 assetsZhRobotoBlackWoff,
	"assets/zh/Roboto-Black.woff2":                assetsZhRobotoBlackWoff2,
	"assets/zh/Roboto-BlackItalic.woff":           assetsZhRobotoBlackitalicWoff,
	"assets/zh/Roboto-BlackItalic.woff2":          assetsZhRobotoBlackitalicWoff2,
	"assets/zh/Roboto-Bold.woff":                  assetsZhRobotoBoldWoff,
	"assets/zh/Roboto-Bold.woff2":                 assetsZhRobotoBoldWoff2,
	"assets/zh/Roboto-BoldItalic.woff":            assetsZhRobotoBolditalicWoff,
	"assets/zh/Roboto-BoldItalic.woff2":           assetsZhRobotoBolditalicWoff2,
	"assets/zh/Roboto-Light.woff":                 assetsZhRobotoLightWoff,
	"assets/zh/Roboto-Light.woff2":                assetsZhRobotoLightWoff2,
	"assets/zh/Roboto-LightItalic.woff":           assetsZhRobotoLightitalicWoff,
	"assets/zh/Roboto-LightItalic.woff2":          assetsZhRobotoLightitalicWoff2,
	"assets/zh/Roboto-Medium.woff":                assetsZhRobotoMediumWoff,
	"assets/zh/Roboto-Medium.woff2":               assetsZhRobotoMediumWoff2,
	"assets/zh/Roboto-MediumItalic.woff":          assetsZhRobotoMediumitalicWoff,
	"assets/zh/Roboto-MediumItalic.woff2":         assetsZhRobotoMediumitalicWoff2,
	"assets/zh/Roboto-Regular.woff":               assetsZhRobotoRegularWoff,
	"assets/zh/Roboto-Regular.woff2":              assetsZhRobotoRegularWoff2,
	"assets/zh/Roboto-RegularItalic.woff":         assetsZhRobotoRegularitalicWoff,
	"assets/zh/Roboto-RegularItalic.woff2":        assetsZhRobotoRegularitalicWoff2,
	"assets/zh/Roboto-Thin.woff":                  assetsZhRobotoThinWoff,
	"assets/zh/Roboto-Thin.woff2":                 assetsZhRobotoThinWoff2,
	"assets/zh/Roboto-ThinItalic.woff":            assetsZhRobotoThinitalicWoff,
	"assets/zh/Roboto-ThinItalic.woff2":           assetsZhRobotoThinitalicWoff2,
	"assets/zh/assets/brand/mlt-logo-en-dark.svg": assetsZhAssetsBrandMltLogoEnDarkSvg,
	"assets/zh/assets/brand/mlt-logo-en-orig.svg": assetsZhAssetsBrandMltLogoEnOrigSvg,
	"assets/zh/assets/brand/mlt-logo-en.svg":      assetsZhAssetsBrandMltLogoEnSvg,
	"assets/zh/assets/brand/mlt-logo-ru-dark.svg": assetsZhAssetsBrandMltLogoRuDarkSvg,
	"assets/zh/assets/brand/mlt-logo-ru-orig.svg": assetsZhAssetsBrandMltLogoRuOrigSvg,
	"assets/zh/assets/brand/mlt-logo-ru.svg":      assetsZhAssetsBrandMltLogoRuSvg,
	"assets/zh/assets/brand/mlt-logo-zh-dark.svg": assetsZhAssetsBrandMltLogoZhDarkSvg,
	"assets/zh/assets/brand/mlt-logo-zh-orig.svg": assetsZhAssetsBrandMltLogoZhOrigSvg,
	"assets/zh/assets/brand/mlt-logo-zh.svg":      assetsZhAssetsBrandMltLogoZhSvg,
	"assets/zh/assets/flags/china_round_48.png":   assetsZhAssetsFlagsChina_round_48Png,
	"assets/zh/assets/flags/russia_round_48.png":  assetsZhAssetsFlagsRussia_round_48Png,
	"assets/zh/assets/flags/usa_round_48.png":     assetsZhAssetsFlagsUsa_round_48Png,
	"assets/zh/favicon.ico":                       assetsZhFaviconIco,
	"assets/zh/index.html":                        assetsZhIndexHtml,
	"assets/zh/main-es2015.js":                    assetsZhMainEs2015Js,
	"assets/zh/main-es2015.js.map":                assetsZhMainEs2015JsMap,
	"assets/zh/main-es5.js":                       assetsZhMainEs5Js,
	"assets/zh/main-es5.js.map":                   assetsZhMainEs5JsMap,
	"assets/zh/polyfills-es2015.js":               assetsZhPolyfillsEs2015Js,
	"assets/zh/polyfills-es2015.js.map":           assetsZhPolyfillsEs2015JsMap,
	"assets/zh/polyfills-es5.js":                  assetsZhPolyfillsEs5Js,
	"assets/zh/polyfills-es5.js.map":              assetsZhPolyfillsEs5JsMap,
	"assets/zh/runtime-es2015.js":                 assetsZhRuntimeEs2015Js,
	"assets/zh/runtime-es2015.js.map":             assetsZhRuntimeEs2015JsMap,
	"assets/zh/runtime-es5.js":                    assetsZhRuntimeEs5Js,
	"assets/zh/runtime-es5.js.map":                assetsZhRuntimeEs5JsMap,
	"assets/zh/styles.css":                        assetsZhStylesCss,
	"assets/zh/styles.css.map":                    assetsZhStylesCssMap,
	"assets/zh/vendor-es2015.js":                  assetsZhVendorEs2015Js,
	"assets/zh/vendor-es2015.js.map":              assetsZhVendorEs2015JsMap,
	"assets/zh/vendor-es5.js":                     assetsZhVendorEs5Js,
	"assets/zh/vendor-es5.js.map":                 assetsZhVendorEs5JsMap,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"en": &bintree{nil, map[string]*bintree{
			"MaterialIcons-Regular.eot":   &bintree{assetsEnMaterialiconsRegularEot, map[string]*bintree{}},
			"MaterialIcons-Regular.ttf":   &bintree{assetsEnMaterialiconsRegularTtf, map[string]*bintree{}},
			"MaterialIcons-Regular.woff":  &bintree{assetsEnMaterialiconsRegularWoff, map[string]*bintree{}},
			"MaterialIcons-Regular.woff2": &bintree{assetsEnMaterialiconsRegularWoff2, map[string]*bintree{}},
			"Roboto-Black.woff":           &bintree{assetsEnRobotoBlackWoff, map[string]*bintree{}},
			"Roboto-Black.woff2":          &bintree{assetsEnRobotoBlackWoff2, map[string]*bintree{}},
			"Roboto-BlackItalic.woff":     &bintree{assetsEnRobotoBlackitalicWoff, map[string]*bintree{}},
			"Roboto-BlackItalic.woff2":    &bintree{assetsEnRobotoBlackitalicWoff2, map[string]*bintree{}},
			"Roboto-Bold.woff":            &bintree{assetsEnRobotoBoldWoff, map[string]*bintree{}},
			"Roboto-Bold.woff2":           &bintree{assetsEnRobotoBoldWoff2, map[string]*bintree{}},
			"Roboto-BoldItalic.woff":      &bintree{assetsEnRobotoBolditalicWoff, map[string]*bintree{}},
			"Roboto-BoldItalic.woff2":     &bintree{assetsEnRobotoBolditalicWoff2, map[string]*bintree{}},
			"Roboto-Light.woff":           &bintree{assetsEnRobotoLightWoff, map[string]*bintree{}},
			"Roboto-Light.woff2":          &bintree{assetsEnRobotoLightWoff2, map[string]*bintree{}},
			"Roboto-LightItalic.woff":     &bintree{assetsEnRobotoLightitalicWoff, map[string]*bintree{}},
			"Roboto-LightItalic.woff2":    &bintree{assetsEnRobotoLightitalicWoff2, map[string]*bintree{}},
			"Roboto-Medium.woff":          &bintree{assetsEnRobotoMediumWoff, map[string]*bintree{}},
			"Roboto-Medium.woff2":         &bintree{assetsEnRobotoMediumWoff2, map[string]*bintree{}},
			"Roboto-MediumItalic.woff":    &bintree{assetsEnRobotoMediumitalicWoff, map[string]*bintree{}},
			"Roboto-MediumItalic.woff2":   &bintree{assetsEnRobotoMediumitalicWoff2, map[string]*bintree{}},
			"Roboto-Regular.woff":         &bintree{assetsEnRobotoRegularWoff, map[string]*bintree{}},
			"Roboto-Regular.woff2":        &bintree{assetsEnRobotoRegularWoff2, map[string]*bintree{}},
			"Roboto-RegularItalic.woff":   &bintree{assetsEnRobotoRegularitalicWoff, map[string]*bintree{}},
			"Roboto-RegularItalic.woff2":  &bintree{assetsEnRobotoRegularitalicWoff2, map[string]*bintree{}},
			"Roboto-Thin.woff":            &bintree{assetsEnRobotoThinWoff, map[string]*bintree{}},
			"Roboto-Thin.woff2":           &bintree{assetsEnRobotoThinWoff2, map[string]*bintree{}},
			"Roboto-ThinItalic.woff":      &bintree{assetsEnRobotoThinitalicWoff, map[string]*bintree{}},
			"Roboto-ThinItalic.woff2":     &bintree{assetsEnRobotoThinitalicWoff2, map[string]*bintree{}},
			"assets": &bintree{nil, map[string]*bintree{
				"brand": &bintree{nil, map[string]*bintree{
					"mlt-logo-en-dark.svg": &bintree{assetsEnAssetsBrandMltLogoEnDarkSvg, map[string]*bintree{}},
					"mlt-logo-en-orig.svg": &bintree{assetsEnAssetsBrandMltLogoEnOrigSvg, map[string]*bintree{}},
					"mlt-logo-en.svg":      &bintree{assetsEnAssetsBrandMltLogoEnSvg, map[string]*bintree{}},
					"mlt-logo-ru-dark.svg": &bintree{assetsEnAssetsBrandMltLogoRuDarkSvg, map[string]*bintree{}},
					"mlt-logo-ru-orig.svg": &bintree{assetsEnAssetsBrandMltLogoRuOrigSvg, map[string]*bintree{}},
					"mlt-logo-ru.svg":      &bintree{assetsEnAssetsBrandMltLogoRuSvg, map[string]*bintree{}},
					"mlt-logo-zh-dark.svg": &bintree{assetsEnAssetsBrandMltLogoZhDarkSvg, map[string]*bintree{}},
					"mlt-logo-zh-orig.svg": &bintree{assetsEnAssetsBrandMltLogoZhOrigSvg, map[string]*bintree{}},
					"mlt-logo-zh.svg":      &bintree{assetsEnAssetsBrandMltLogoZhSvg, map[string]*bintree{}},
				}},
				"flags": &bintree{nil, map[string]*bintree{
					"china_round_48.png":  &bintree{assetsEnAssetsFlagsChina_round_48Png, map[string]*bintree{}},
					"russia_round_48.png": &bintree{assetsEnAssetsFlagsRussia_round_48Png, map[string]*bintree{}},
					"usa_round_48.png":    &bintree{assetsEnAssetsFlagsUsa_round_48Png, map[string]*bintree{}},
				}},
			}},
			"favicon.ico":             &bintree{assetsEnFaviconIco, map[string]*bintree{}},
			"index.html":              &bintree{assetsEnIndexHtml, map[string]*bintree{}},
			"main-es2015.js":          &bintree{assetsEnMainEs2015Js, map[string]*bintree{}},
			"main-es2015.js.map":      &bintree{assetsEnMainEs2015JsMap, map[string]*bintree{}},
			"main-es5.js":             &bintree{assetsEnMainEs5Js, map[string]*bintree{}},
			"main-es5.js.map":         &bintree{assetsEnMainEs5JsMap, map[string]*bintree{}},
			"polyfills-es2015.js":     &bintree{assetsEnPolyfillsEs2015Js, map[string]*bintree{}},
			"polyfills-es2015.js.map": &bintree{assetsEnPolyfillsEs2015JsMap, map[string]*bintree{}},
			"polyfills-es5.js":        &bintree{assetsEnPolyfillsEs5Js, map[string]*bintree{}},
			"polyfills-es5.js.map":    &bintree{assetsEnPolyfillsEs5JsMap, map[string]*bintree{}},
			"runtime-es2015.js":       &bintree{assetsEnRuntimeEs2015Js, map[string]*bintree{}},
			"runtime-es2015.js.map":   &bintree{assetsEnRuntimeEs2015JsMap, map[string]*bintree{}},
			"runtime-es5.js":          &bintree{assetsEnRuntimeEs5Js, map[string]*bintree{}},
			"runtime-es5.js.map":      &bintree{assetsEnRuntimeEs5JsMap, map[string]*bintree{}},
			"styles.css":              &bintree{assetsEnStylesCss, map[string]*bintree{}},
			"styles.css.map":          &bintree{assetsEnStylesCssMap, map[string]*bintree{}},
			"vendor-es2015.js":        &bintree{assetsEnVendorEs2015Js, map[string]*bintree{}},
			"vendor-es2015.js.map":    &bintree{assetsEnVendorEs2015JsMap, map[string]*bintree{}},
			"vendor-es5.js":           &bintree{assetsEnVendorEs5Js, map[string]*bintree{}},
			"vendor-es5.js.map":       &bintree{assetsEnVendorEs5JsMap, map[string]*bintree{}},
		}},
		"gotty": &bintree{nil, map[string]*bintree{
			"linux_amd64": &bintree{nil, map[string]*bintree{
				"gotty": &bintree{assetsGottyLinux_amd64Gotty, map[string]*bintree{}},
			}},
			"linux_arm": &bintree{nil, map[string]*bintree{
				"gotty": &bintree{assetsGottyLinux_armGotty, map[string]*bintree{}},
			}},
		}},
		"ru": &bintree{nil, map[string]*bintree{
			"MaterialIcons-Regular.eot":   &bintree{assetsRuMaterialiconsRegularEot, map[string]*bintree{}},
			"MaterialIcons-Regular.ttf":   &bintree{assetsRuMaterialiconsRegularTtf, map[string]*bintree{}},
			"MaterialIcons-Regular.woff":  &bintree{assetsRuMaterialiconsRegularWoff, map[string]*bintree{}},
			"MaterialIcons-Regular.woff2": &bintree{assetsRuMaterialiconsRegularWoff2, map[string]*bintree{}},
			"Roboto-Black.woff":           &bintree{assetsRuRobotoBlackWoff, map[string]*bintree{}},
			"Roboto-Black.woff2":          &bintree{assetsRuRobotoBlackWoff2, map[string]*bintree{}},
			"Roboto-BlackItalic.woff":     &bintree{assetsRuRobotoBlackitalicWoff, map[string]*bintree{}},
			"Roboto-BlackItalic.woff2":    &bintree{assetsRuRobotoBlackitalicWoff2, map[string]*bintree{}},
			"Roboto-Bold.woff":            &bintree{assetsRuRobotoBoldWoff, map[string]*bintree{}},
			"Roboto-Bold.woff2":           &bintree{assetsRuRobotoBoldWoff2, map[string]*bintree{}},
			"Roboto-BoldItalic.woff":      &bintree{assetsRuRobotoBolditalicWoff, map[string]*bintree{}},
			"Roboto-BoldItalic.woff2":     &bintree{assetsRuRobotoBolditalicWoff2, map[string]*bintree{}},
			"Roboto-Light.woff":           &bintree{assetsRuRobotoLightWoff, map[string]*bintree{}},
			"Roboto-Light.woff2":          &bintree{assetsRuRobotoLightWoff2, map[string]*bintree{}},
			"Roboto-LightItalic.woff":     &bintree{assetsRuRobotoLightitalicWoff, map[string]*bintree{}},
			"Roboto-LightItalic.woff2":    &bintree{assetsRuRobotoLightitalicWoff2, map[string]*bintree{}},
			"Roboto-Medium.woff":          &bintree{assetsRuRobotoMediumWoff, map[string]*bintree{}},
			"Roboto-Medium.woff2":         &bintree{assetsRuRobotoMediumWoff2, map[string]*bintree{}},
			"Roboto-MediumItalic.woff":    &bintree{assetsRuRobotoMediumitalicWoff, map[string]*bintree{}},
			"Roboto-MediumItalic.woff2":   &bintree{assetsRuRobotoMediumitalicWoff2, map[string]*bintree{}},
			"Roboto-Regular.woff":         &bintree{assetsRuRobotoRegularWoff, map[string]*bintree{}},
			"Roboto-Regular.woff2":        &bintree{assetsRuRobotoRegularWoff2, map[string]*bintree{}},
			"Roboto-RegularItalic.woff":   &bintree{assetsRuRobotoRegularitalicWoff, map[string]*bintree{}},
			"Roboto-RegularItalic.woff2":  &bintree{assetsRuRobotoRegularitalicWoff2, map[string]*bintree{}},
			"Roboto-Thin.woff":            &bintree{assetsRuRobotoThinWoff, map[string]*bintree{}},
			"Roboto-Thin.woff2":           &bintree{assetsRuRobotoThinWoff2, map[string]*bintree{}},
			"Roboto-ThinItalic.woff":      &bintree{assetsRuRobotoThinitalicWoff, map[string]*bintree{}},
			"Roboto-ThinItalic.woff2":     &bintree{assetsRuRobotoThinitalicWoff2, map[string]*bintree{}},
			"assets": &bintree{nil, map[string]*bintree{
				"brand": &bintree{nil, map[string]*bintree{
					"mlt-logo-en-dark.svg": &bintree{assetsRuAssetsBrandMltLogoEnDarkSvg, map[string]*bintree{}},
					"mlt-logo-en-orig.svg": &bintree{assetsRuAssetsBrandMltLogoEnOrigSvg, map[string]*bintree{}},
					"mlt-logo-en.svg":      &bintree{assetsRuAssetsBrandMltLogoEnSvg, map[string]*bintree{}},
					"mlt-logo-ru-dark.svg": &bintree{assetsRuAssetsBrandMltLogoRuDarkSvg, map[string]*bintree{}},
					"mlt-logo-ru-orig.svg": &bintree{assetsRuAssetsBrandMltLogoRuOrigSvg, map[string]*bintree{}},
					"mlt-logo-ru.svg":      &bintree{assetsRuAssetsBrandMltLogoRuSvg, map[string]*bintree{}},
					"mlt-logo-zh-dark.svg": &bintree{assetsRuAssetsBrandMltLogoZhDarkSvg, map[string]*bintree{}},
					"mlt-logo-zh-orig.svg": &bintree{assetsRuAssetsBrandMltLogoZhOrigSvg, map[string]*bintree{}},
					"mlt-logo-zh.svg":      &bintree{assetsRuAssetsBrandMltLogoZhSvg, map[string]*bintree{}},
				}},
				"flags": &bintree{nil, map[string]*bintree{
					"china_round_48.png":  &bintree{assetsRuAssetsFlagsChina_round_48Png, map[string]*bintree{}},
					"russia_round_48.png": &bintree{assetsRuAssetsFlagsRussia_round_48Png, map[string]*bintree{}},
					"usa_round_48.png":    &bintree{assetsRuAssetsFlagsUsa_round_48Png, map[string]*bintree{}},
				}},
			}},
			"favicon.ico":             &bintree{assetsRuFaviconIco, map[string]*bintree{}},
			"index.html":              &bintree{assetsRuIndexHtml, map[string]*bintree{}},
			"main-es2015.js":          &bintree{assetsRuMainEs2015Js, map[string]*bintree{}},
			"main-es2015.js.map":      &bintree{assetsRuMainEs2015JsMap, map[string]*bintree{}},
			"main-es5.js":             &bintree{assetsRuMainEs5Js, map[string]*bintree{}},
			"main-es5.js.map":         &bintree{assetsRuMainEs5JsMap, map[string]*bintree{}},
			"polyfills-es2015.js":     &bintree{assetsRuPolyfillsEs2015Js, map[string]*bintree{}},
			"polyfills-es2015.js.map": &bintree{assetsRuPolyfillsEs2015JsMap, map[string]*bintree{}},
			"polyfills-es5.js":        &bintree{assetsRuPolyfillsEs5Js, map[string]*bintree{}},
			"polyfills-es5.js.map":    &bintree{assetsRuPolyfillsEs5JsMap, map[string]*bintree{}},
			"runtime-es2015.js":       &bintree{assetsRuRuntimeEs2015Js, map[string]*bintree{}},
			"runtime-es2015.js.map":   &bintree{assetsRuRuntimeEs2015JsMap, map[string]*bintree{}},
			"runtime-es5.js":          &bintree{assetsRuRuntimeEs5Js, map[string]*bintree{}},
			"runtime-es5.js.map":      &bintree{assetsRuRuntimeEs5JsMap, map[string]*bintree{}},
			"styles.css":              &bintree{assetsRuStylesCss, map[string]*bintree{}},
			"styles.css.map":          &bintree{assetsRuStylesCssMap, map[string]*bintree{}},
			"vendor-es2015.js":        &bintree{assetsRuVendorEs2015Js, map[string]*bintree{}},
			"vendor-es2015.js.map":    &bintree{assetsRuVendorEs2015JsMap, map[string]*bintree{}},
			"vendor-es5.js":           &bintree{assetsRuVendorEs5Js, map[string]*bintree{}},
			"vendor-es5.js.map":       &bintree{assetsRuVendorEs5JsMap, map[string]*bintree{}},
		}},
		"zh": &bintree{nil, map[string]*bintree{
			"MaterialIcons-Regular.eot":   &bintree{assetsZhMaterialiconsRegularEot, map[string]*bintree{}},
			"MaterialIcons-Regular.ttf":   &bintree{assetsZhMaterialiconsRegularTtf, map[string]*bintree{}},
			"MaterialIcons-Regular.woff":  &bintree{assetsZhMaterialiconsRegularWoff, map[string]*bintree{}},
			"MaterialIcons-Regular.woff2": &bintree{assetsZhMaterialiconsRegularWoff2, map[string]*bintree{}},
			"Roboto-Black.woff":           &bintree{assetsZhRobotoBlackWoff, map[string]*bintree{}},
			"Roboto-Black.woff2":          &bintree{assetsZhRobotoBlackWoff2, map[string]*bintree{}},
			"Roboto-BlackItalic.woff":     &bintree{assetsZhRobotoBlackitalicWoff, map[string]*bintree{}},
			"Roboto-BlackItalic.woff2":    &bintree{assetsZhRobotoBlackitalicWoff2, map[string]*bintree{}},
			"Roboto-Bold.woff":            &bintree{assetsZhRobotoBoldWoff, map[string]*bintree{}},
			"Roboto-Bold.woff2":           &bintree{assetsZhRobotoBoldWoff2, map[string]*bintree{}},
			"Roboto-BoldItalic.woff":      &bintree{assetsZhRobotoBolditalicWoff, map[string]*bintree{}},
			"Roboto-BoldItalic.woff2":     &bintree{assetsZhRobotoBolditalicWoff2, map[string]*bintree{}},
			"Roboto-Light.woff":           &bintree{assetsZhRobotoLightWoff, map[string]*bintree{}},
			"Roboto-Light.woff2":          &bintree{assetsZhRobotoLightWoff2, map[string]*bintree{}},
			"Roboto-LightItalic.woff":     &bintree{assetsZhRobotoLightitalicWoff, map[string]*bintree{}},
			"Roboto-LightItalic.woff2":    &bintree{assetsZhRobotoLightitalicWoff2, map[string]*bintree{}},
			"Roboto-Medium.woff":          &bintree{assetsZhRobotoMediumWoff, map[string]*bintree{}},
			"Roboto-Medium.woff2":         &bintree{assetsZhRobotoMediumWoff2, map[string]*bintree{}},
			"Roboto-MediumItalic.woff":    &bintree{assetsZhRobotoMediumitalicWoff, map[string]*bintree{}},
			"Roboto-MediumItalic.woff2":   &bintree{assetsZhRobotoMediumitalicWoff2, map[string]*bintree{}},
			"Roboto-Regular.woff":         &bintree{assetsZhRobotoRegularWoff, map[string]*bintree{}},
			"Roboto-Regular.woff2":        &bintree{assetsZhRobotoRegularWoff2, map[string]*bintree{}},
			"Roboto-RegularItalic.woff":   &bintree{assetsZhRobotoRegularitalicWoff, map[string]*bintree{}},
			"Roboto-RegularItalic.woff2":  &bintree{assetsZhRobotoRegularitalicWoff2, map[string]*bintree{}},
			"Roboto-Thin.woff":            &bintree{assetsZhRobotoThinWoff, map[string]*bintree{}},
			"Roboto-Thin.woff2":           &bintree{assetsZhRobotoThinWoff2, map[string]*bintree{}},
			"Roboto-ThinItalic.woff":      &bintree{assetsZhRobotoThinitalicWoff, map[string]*bintree{}},
			"Roboto-ThinItalic.woff2":     &bintree{assetsZhRobotoThinitalicWoff2, map[string]*bintree{}},
			"assets": &bintree{nil, map[string]*bintree{
				"brand": &bintree{nil, map[string]*bintree{
					"mlt-logo-en-dark.svg": &bintree{assetsZhAssetsBrandMltLogoEnDarkSvg, map[string]*bintree{}},
					"mlt-logo-en-orig.svg": &bintree{assetsZhAssetsBrandMltLogoEnOrigSvg, map[string]*bintree{}},
					"mlt-logo-en.svg":      &bintree{assetsZhAssetsBrandMltLogoEnSvg, map[string]*bintree{}},
					"mlt-logo-ru-dark.svg": &bintree{assetsZhAssetsBrandMltLogoRuDarkSvg, map[string]*bintree{}},
					"mlt-logo-ru-orig.svg": &bintree{assetsZhAssetsBrandMltLogoRuOrigSvg, map[string]*bintree{}},
					"mlt-logo-ru.svg":      &bintree{assetsZhAssetsBrandMltLogoRuSvg, map[string]*bintree{}},
					"mlt-logo-zh-dark.svg": &bintree{assetsZhAssetsBrandMltLogoZhDarkSvg, map[string]*bintree{}},
					"mlt-logo-zh-orig.svg": &bintree{assetsZhAssetsBrandMltLogoZhOrigSvg, map[string]*bintree{}},
					"mlt-logo-zh.svg":      &bintree{assetsZhAssetsBrandMltLogoZhSvg, map[string]*bintree{}},
				}},
				"flags": &bintree{nil, map[string]*bintree{
					"china_round_48.png":  &bintree{assetsZhAssetsFlagsChina_round_48Png, map[string]*bintree{}},
					"russia_round_48.png": &bintree{assetsZhAssetsFlagsRussia_round_48Png, map[string]*bintree{}},
					"usa_round_48.png":    &bintree{assetsZhAssetsFlagsUsa_round_48Png, map[string]*bintree{}},
				}},
			}},
			"favicon.ico":             &bintree{assetsZhFaviconIco, map[string]*bintree{}},
			"index.html":              &bintree{assetsZhIndexHtml, map[string]*bintree{}},
			"main-es2015.js":          &bintree{assetsZhMainEs2015Js, map[string]*bintree{}},
			"main-es2015.js.map":      &bintree{assetsZhMainEs2015JsMap, map[string]*bintree{}},
			"main-es5.js":             &bintree{assetsZhMainEs5Js, map[string]*bintree{}},
			"main-es5.js.map":         &bintree{assetsZhMainEs5JsMap, map[string]*bintree{}},
			"polyfills-es2015.js":     &bintree{assetsZhPolyfillsEs2015Js, map[string]*bintree{}},
			"polyfills-es2015.js.map": &bintree{assetsZhPolyfillsEs2015JsMap, map[string]*bintree{}},
			"polyfills-es5.js":        &bintree{assetsZhPolyfillsEs5Js, map[string]*bintree{}},
			"polyfills-es5.js.map":    &bintree{assetsZhPolyfillsEs5JsMap, map[string]*bintree{}},
			"runtime-es2015.js":       &bintree{assetsZhRuntimeEs2015Js, map[string]*bintree{}},
			"runtime-es2015.js.map":   &bintree{assetsZhRuntimeEs2015JsMap, map[string]*bintree{}},
			"runtime-es5.js":          &bintree{assetsZhRuntimeEs5Js, map[string]*bintree{}},
			"runtime-es5.js.map":      &bintree{assetsZhRuntimeEs5JsMap, map[string]*bintree{}},
			"styles.css":              &bintree{assetsZhStylesCss, map[string]*bintree{}},
			"styles.css.map":          &bintree{assetsZhStylesCssMap, map[string]*bintree{}},
			"vendor-es2015.js":        &bintree{assetsZhVendorEs2015Js, map[string]*bintree{}},
			"vendor-es2015.js.map":    &bintree{assetsZhVendorEs2015JsMap, map[string]*bintree{}},
			"vendor-es5.js":           &bintree{assetsZhVendorEs5Js, map[string]*bintree{}},
			"vendor-es5.js.map":       &bintree{assetsZhVendorEs5JsMap, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
