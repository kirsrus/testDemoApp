# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.13' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    echo 'GOBIN: $(GOBIN)'
    echo 'GOPATH: $(GOPATH)'
    echo 'GOROOT: $(GOROOT)'
    echo 'System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)'
    echo 'build.repository.name: $(build.repository.name)'
    echo 'modulePath: $(modulePath)'
    echo 'System.TeamProject: $(System.TeamProject)'
    echo 'Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)'
  displayName: 'Variables'

#- script: |
#    go version
#    go get -v -t -d ./...
#    if [ -f Gopkg.toml ]; then
#        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#        dep ensure
#    fi
#    go build -v .

# - script: |
#    go version
#    cd backend
#    go get -v -t -d ./...
#    go build -v
#  workingDirectory: '$(modulePath)'
#  displayName: 'Get dependencies, then build'

- task: GoTool@0
  inputs:
    version: '1.13.5'
  displayName: 'Use Go 1.13.5'
- task: Go@0
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(modulePath)'
  displayName: 'go get'



